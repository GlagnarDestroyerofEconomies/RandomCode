{
  /////////////////////////////////////////////////////////////////////
  ////////////////////////Grab the Trees//////////////////////////////poop
  /////////////////////////////////////////////////////////////////////
  TChain* chain= new TChain("ZDCDigiTree");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211328merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211347merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211354merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211362merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211363merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211371merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211390merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211421merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211460merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211532merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211538merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211568merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211571merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211587merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211598merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211599merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211607merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211620merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211622merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211623merged_castorfix_beamreversal.root");
  chain->Add("/hadoop/store/user/jgomez2/HeavyIonRun2013/PAUPCMinBias_RAW/ForwardTrees_PAUPCMinBiasRaw_211631merged_castorfix_beamreversal.root");
  int TotalNumberOfEvents;
  TotalNumberOfEvents = chain->GetEntries();  //Scans the file and finds the number of events
  
  
  std::cout<<"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"<<std::endl;
  std::cout<<"++PLEASE BE VERY CAREFUL AND READ INSTRUCTIONS ON DIFFERENT INPUTS++"<<std::endl;
  std::cout<<"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"<<std::endl;
  std::cout<<""<<std::endl;
  
  bool PZDC;
  bool NZDC;
  bool HAD;
  bool EM;
  bool NoiseSubtract;
  bool ADCVeto;
  int SignalTS1;
  int SignalTS2;
  int SignalTS3;
  int NoiseTS1;
  int NoiseTS2;
  int NoiseTS3;
  int EventsToAnalyze;
  double NumberOfSignals=0.;
  double NumberOfNoises=0.;
  double ratio=0.;
  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////Begin Fluffy setup stuff/////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////
  std::cout<<"--------------------------------------------------------------------"<<std::endl;
  std::cout<<"| For this first question please enter an integer number, no commas|"<<std::endl;
  std::cout<<"| If you want to analyze all of the events, enter -1 when prompted.|"<<std::endl;
  std::cout<<"--------------------------------------------------------------------"<<std::endl;
  std::cout<<""<<std::endl;
  std::cout<<"How many events would you like to analyze? There are"<<" "<<TotalNumberOfEvents<<" "<<"events in total.:";
  std::cin>>EventsToAnalyze;
  std::cout<<""<<std::endl;
  std::cout<<"-----------------------------------------------------------------------------"<<std::endl;  
  std::cout<<"|For the following several questions please enter '1' for yes and 0' for no.|"<<std::endl;
  std::cout<<"-----------------------------------------------------------------------------"<<std::endl;
  std::cout<<""<<std::endl;
  std::cout<<"Would you like to look at P-ZDC data?:";
  std::cin>>PZDC;
  std::cout<<""<<std::endl;
  std::cout<<"Would you like to look at N-ZDC data?:";
  std::cin>>NZDC;
  std::cout<<""<<std::endl;
  std::cout<<"Would you like to include the Hadronic Section in this analysis?:";
  std::cin>>HAD;
  std::cout<<""<<std::endl;
  std::cout<<"Would you like to include the Electromagnetic Section in this analysis?:";
  std::cin>>EM;
  std::cout<<""<<std::endl;
  std::cout<<"Would you like to have noise subtraction?:";
  std::cin>>NoiseSubtract;
  std::cout<<""<<std::endl;
  std::cout<<"Would you like to veto events that saturate?";
  std::cin>>ADCVeto;
  std::cout<<""<<std::endl;
  std::cout<<"-----------------------------------------------------------------------------------------------------------------"<<std::endl;
  std::cout<<"|For the next few questions you will need to enter 3 numbers, please seperate any numbers by a single space/tab. |"<<std::endl;
  std::cout<<"|If there are only 1 or 2 numbers you wish to enter...please enter -1 in place of entries you don't want.        |"<<std::endl;
  std::cout<<"-----------------------------------------------------------------------------------------------------------------"<<std::endl;
  std::cout<<""<<std::endl;
  std::cout<<"Please enter which time slices you would like to look at for SIGNAL:";
  std::cin>>SignalTS1>>SignalTS2>>SignalTS3;
  std::cout<<std::endl;
  if (NoiseSubtract==1)
    {
      std::cout<<"Please enter which time slices you would like to be counted as NOISE:";
      std::cin>>NoiseTS1>>NoiseTS2>>NoiseTS3;
      std::cout<<""<<std::endl;
    }
  std::cout<<"Thanks for your help! Please wait while I set up your analysis."<<std::endl;
  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////End of fluffy setup stuff/////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////This counts up the number of Signal TS's/////////////////
  ///////////////////////////////////////////////////////////////////////////////////  
  if (SignalTS1!=-1) NumberOfSignals+=1;
  if (SignalTS2!=-1) NumberOfSignals+=1;
  if (SignalTS3!=-1) NumberOfSignals+=1;
  
  ///////////////////////////////////////////////////////////////////////////////////
  /////////////// This counts up the number of Noise TS's if applicable/////////////
  ///////////////////////////////////////////////////////////////////////////////// 
  if (NoiseSubtract==1)
    {
      if (NoiseTS1!=-1) NumberOfNoises+=1;
      if (NoiseTS2!=-1) NumberOfNoises+=1;
      if (NoiseTS3!=-1) NumberOfNoises+=1;
      ratio=NumberOfSignals/NumberOfNoises;
    }


  /////////////////////////////////////////////////////////////////////////////////
  ///////////////// This sets how many events will be analyzed////////////////////
  ////////////////////////////////////////////////////////////////////////////////
  if (EventsToAnalyze==-1)
    {
      EventsToAnalyze=TotalNumberOfEvents;
    }
 

  /////////////////////////////////////////////////////////////////////////////////
  ///////////////////////Make Plots and Variables/////////////////////////////////
  //////////////////////specific to the kind of analysis asked for///////////////
  //////////////////////////////////////////////////////////////////////////////
  double ZDCTotal;
  double PZDCTotal;
  double PZDCEMTotal;
  double PZDCHADTotal;
  double NZDCTotal;
  double NZDCEMTotal;
  double NZDCHADTotal;

  if (PZDC==1 && NZDC==1)
    {
      if (EM==1 && HAD==1)
	{
	  double PZDCEM1TotalSignal;
	  double PZDCEM2TotalSignal;
	  double PZDCEM3TotalSignal;
	  double PZDCEM4TotalSignal;
	  double PZDCEM5TotalSignal;
	  double PZDCHAD1TotalSignal;
	  double PZDCHAD2TotalSignal;
	  double PZDCHAD3TotalSignal;
	  double PZDCHAD4TotalSignal;
	  ///NZDC
	  double NZDCEM1TotalSignal;
	  double NZDCEM2TotalSignal;
	  double NZDCEM3TotalSignal;
	  double NZDCEM4TotalSignal;
	  double NZDCEM5TotalSignal;
	  double NZDCHAD1TotalSignal;
	  double NZDCHAD2TotalSignal;
	  double NZDCHAD3TotalSignal;
	  double NZDCHAD4TotalSignal;
	  if (NoiseSubtract==true)
	    {
	      double PZDCEM1TotalNoise;
	      double PZDCEM2TotalNoise;
	      double PZDCEM3TotalNoise;
	      double PZDCEM4TotalNoise;
	      double PZDCEM5TotalNoise;
	      double PZDCHAD1TotalNoise;
	      double PZDCHAD2TotalNoise;
	      double PZDCHAD3TotalNoise;
	      double PZDCHAD4TotalNoise;
	      ///NZDC
	      double NZDCEM1TotalNoise;
	      double NZDCEM2TotalNoise;
	      double NZDCEM3TotalNoise;
	      double NZDCEM4TotalNoise;
	      double NZDCEM5TotalNoise;
	      double NZDCHAD1TotalNoise;
	      double NZDCHAD2TotalNoise;
	      double NZDCHAD3TotalNoise;
	      double NZDCHAD4TotalNoise;
	      if (ADCVeto==1)
		{
		  int pem1adc;
		  int pem2adc;
		  int pem3adc;
		  int pem4adc;
		  int pem5adc;
		  int phad1adc;
		  int phad2adc;
		  int phad3adc;
		  int phad4adc;
		  int nem1adc;
		  int nem2adc;
		  int nem3adc;
		  int nem4adc;
		  int nem5adc;
		  int nhad1adc;
		  int nhad2adc;
		  int nhad3adc;
		  int nhad4adc;
		  bool Pdidsaturate;
		  bool Ndidsaturate;
		
		  TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS_ADCVeto","N-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		  TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC_NS_ADCVeto","P-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		  std::cout<<"Starting the analysis now"<<std::endl;
		  for (int i=0;i<EventsToAnalyze;i++)
		    {
		      chain->GetEntry(i);
		      //ZDC Leaves
		      NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		      NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		      NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		      NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		      PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		      PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		      PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		      PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		      NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		      NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		      NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		      NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		      NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		      PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		      PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		      PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		      PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		      PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		    
		      ////ADCCounters
		      NHAD1ADC= (TLeaf*)chain->GetLeaf("negHD1ADCtsz");//NHAD1
		      NHAD2ADC= (TLeaf*)chain->GetLeaf("negHD2ADCtsz");//NHAD2
		      NHAD3ADC= (TLeaf*)chain->GetLeaf("negHD3ADCtsz");//NHAD3
		      NHAD4ADC= (TLeaf*)chain->GetLeaf("negHD4ADCtsz");//NHAD4
		      PHAD1ADC= (TLeaf*)chain->GetLeaf("posHD1ADCtsz");//PHAD1
		      PHAD2ADC= (TLeaf*)chain->GetLeaf("posHD2ADCtsz");//PHAD2
		      PHAD3ADC= (TLeaf*)chain->GetLeaf("posHD3ADCtsz");//PHAD3
		      PHAD4ADC= (TLeaf*)chain->GetLeaf("posHD4ADCtsz");//PHAD4
		      NEM1ADC= (TLeaf*)chain->GetLeaf("negEM1ADCtsz");//NEM1
		      NEM2ADC= (TLeaf*)chain->GetLeaf("negEM2ADCtsz");//NEM2
		      NEM3ADC= (TLeaf*)chain->GetLeaf("negEM3ADCtsz");//NEM3
		      NEM4ADC= (TLeaf*)chain->GetLeaf("negEM4ADCtsz");//NEM4
		      NEM5ADC= (TLeaf*)chain->GetLeaf("negEM5ADCtsz");//NEM5
		      PEM1ADC= (TLeaf*)chain->GetLeaf("posEM1ADCtsz");//PEM1
		      PEM2ADC= (TLeaf*)chain->GetLeaf("posEM2ADCtsz");//PEM2
		      PEM3ADC= (TLeaf*)chain->GetLeaf("posEM3ADCtsz");//PEM3
		      PEM4ADC= (TLeaf*)chain->GetLeaf("posEM4ADCtsz");//PEM4
		      PEM5ADC= (TLeaf*)chain->GetLeaf("posEM5ADCtsz");//PEM5
		    
		      ZDCTotal=0.;
		      PZDCTotal=0.;
		      PZDCEMTotal=0.;
		      PZDCHADTotal=0.;
		      NZDCTotal=0.;
		      NZDCEMTotal=0.;
		      NZDCHADTotal=0.;
		    
		      ///Set All of the Signal/Noise Counters to 0 every event
		    
		      ///PZDC
		      PZDCEM1TotalSignal=0.;
		      PZDCEM1TotalNoise=0.;
		      PZDCEM2TotalSignal=0.;
		      PZDCEM2TotalNoise=0.;
		      PZDCEM3TotalSignal=0.;
		      PZDCEM3TotalNoise=0.;
		      PZDCEM4TotalSignal=0.;
		      PZDCEM4TotalNoise=0.;
		      PZDCEM5TotalSignal=0.;
		      PZDCEM5TotalNoise=0.;
		      PZDCHAD1TotalSignal=0.;
		      PZDCHAD1TotalNoise=0.;
		      PZDCHAD2TotalSignal=0.;
		      PZDCHAD2TotalNoise=0.;
		      PZDCHAD3TotalSignal=0.;
		      PZDCHAD3TotalNoise=0.;
		      PZDCHAD4TotalSignal=0.;
		      PZDCHAD4TotalNoise=0.;
		      ///NZDC
		      NZDCEM1TotalSignal=0.;
		      NZDCEM1TotalNoise=0.;
		      NZDCEM2TotalSignal=0.;
		      NZDCEM2TotalNoise=0.;
		      NZDCEM3TotalSignal=0.;
		      NZDCEM3TotalNoise=0.;
		      NZDCEM4TotalSignal=0.;
		      NZDCEM4TotalNoise=0.;
		      NZDCEM5TotalSignal=0.;
		      NZDCEM5TotalNoise=0.;
		      NZDCHAD1TotalSignal=0.;
		      NZDCHAD1TotalNoise=0.;
		      NZDCHAD2TotalSignal=0.;
		      NZDCHAD2TotalNoise=0.;
		      NZDCHAD3TotalSignal=0.;
		      NZDCHAD3TotalNoise=0.;
		      NZDCHAD4TotalSignal=0.;
		      NZDCHAD4TotalNoise=0.;
		      //ADCCRAP
		      pem1adc=0;
		      pem2adc=0;
		      pem3adc=0;
		      pem4adc=0;
		      pem5adc=0;
		      phad1adc=0;
		      phad2adc=0;
		      phad3adc=0;
		      phad4adc=0;
		      nem1adc=0;
		      nem2adc=0;
		      nem3adc=0;
		      nem4adc=0;
		      nem5adc=0;
		      nhad1adc=0;
		      nhad2adc=0;
		      nhad3adc=0;
		      nhad4adc=0;
		      Pdidsaturate=false;
		      Ndidsaturate=false;
		      for (int k=0;k<10;k++)//adding up the values for ZDC signal
			{
			  if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			    {
			      //PZDC Noise
			      PZDCEM1TotalNoise+=PEM1fC->GetValue(k);
			      PZDCEM2TotalNoise+=PEM2fC->GetValue(k);
			      PZDCEM3TotalNoise+=PEM3fC->GetValue(k);
			      PZDCEM4TotalNoise+=PEM4fC->GetValue(k);
			      PZDCEM5TotalNoise+=PEM5fC->GetValue(k);
			      PZDCHAD1TotalNoise+=PHAD1fC->GetValue(k);
			      PZDCHAD2TotalNoise+=PHAD2fC->GetValue(k);
			      PZDCHAD3TotalNoise+=PHAD3fC->GetValue(k);
			      PZDCHAD4TotalNoise+=PHAD4fC->GetValue(k);
			      //NZDC Noise
			      NZDCEM1TotalNoise+=NEM1fC->GetValue(k);
			      NZDCEM2TotalNoise+=NEM2fC->GetValue(k);
			      NZDCEM3TotalNoise+=NEM3fC->GetValue(k);
			      NZDCEM4TotalNoise+=NEM4fC->GetValue(k);
			      NZDCEM5TotalNoise+=NEM5fC->GetValue(k);
			      NZDCHAD1TotalNoise+=NHAD1fC->GetValue(k);
			      NZDCHAD2TotalNoise+=NHAD2fC->GetValue(k);
			      NZDCHAD3TotalNoise+=NHAD3fC->GetValue(k);
			      NZDCHAD4TotalNoise+=NHAD4fC->GetValue(k);
			    }//end of ZDC Noise statement
			  else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			    {
			      pem1adc=PEM1ADC->GetValue(k);
			      pem2adc=PEM2ADC->GetValue(k);
			      pem3adc=PEM3ADC->GetValue(k);
			      pem4adc=PEM4ADC->GetValue(k);
			      pem5adc=PEM5ADC->GetValue(k);
			      phad1adc=PHAD1ADC->GetValue(k);
			      //	    std::cout<<phad1adc<<std::endl;
			      phad2adc=PHAD2ADC->GetValue(k);
			      phad3adc=PHAD3ADC->GetValue(k);
			      phad4adc=PHAD4ADC->GetValue(k);
			      nem1adc=NEM1ADC->GetValue(k);
			      nem2adc=NEM2ADC->GetValue(k);
			      nem3adc=NEM3ADC->GetValue(k);
			      nem4adc=NEM4ADC->GetValue(k);
			      nem5adc=NEM5ADC->GetValue(k);
			      nhad1adc=NHAD1ADC->GetValue(k);
			      nhad2adc=NHAD2ADC->GetValue(k);
			      nhad3adc=NHAD3ADC->GetValue(k);
			      nhad4adc=NHAD4ADC->GetValue(k);
			      //PZDC Signal
			      if ((pem1adc!=127) && (pem2adc!=127) && (pem3adc!=127) && (pem4adc!=127) && (pem5adc!=127) && (phad1adc!=127) && (phad2adc!=127) && (phad3adc!=127) && (phad4adc!=127))
				{
				  PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
				  PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
				  PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
				  PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
				  PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
				  PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
				  PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
				  PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
				  PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
				}
			      else {
				Pdidsaturate=true;
			      }
			      //NZDC Signal
			      if ((nem1adc!=127) && (nem2adc!=127) && (nem3adc!=127) && (nem4adc!=127) && (nem5adc!=127) && (nhad1adc!=127) && (nhad2adc!=127) && (nhad3adc!=127) &&  (nhad4adc!=127))
				{
				  NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
				  NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
				  NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
				  NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
				  NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
				  NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
				  NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
				  NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
				  NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
				}
			      else {
				Ndidsaturate=true;
			      }
			    }//End of ZDC Signal TS's
			}//end of ZDC TS loop
		    
		      ///////////////////////////////////////////////////////
		      //////////////MAKING SUMS/////////////////////////////
		      /////////////////////////////////////////////////////
		      //PZDC-EM
		      PZDCEMTotal=(PZDCEM1TotalSignal-ratio*PZDCEM1TotalNoise)+(PZDCEM2TotalSignal-ratio*PZDCEM2TotalNoise)+(PZDCEM3TotalSignal-ratio*PZDCEM3TotalNoise)+(PZDCEM4TotalSignal-ratio*PZDCEM4TotalNoise)+(PZDCEM5TotalSignal-ratio*PZDCEM5TotalNoise);
		      ///PZDC-HAD
		      PZDCHADTotal=(PZDCHAD1TotalSignal-ratio*PZDCHAD1TotalNoise)+(PZDCHAD2TotalSignal-ratio*PZDCHAD2TotalNoise)+(PZDCHAD3TotalSignal-ratio*PZDCHAD3TotalNoise)+(PZDCHAD4TotalSignal-ratio*PZDCHAD4TotalNoise);
		      //NZDC-EM
		      NZDCEMTotal=(NZDCEM1TotalSignal-ratio*NZDCEM1TotalNoise)+(NZDCEM2TotalSignal-ratio*NZDCEM2TotalNoise)+(NZDCEM3TotalSignal-ratio*NZDCEM3TotalNoise)+(NZDCEM4TotalSignal-ratio*NZDCEM4TotalNoise)+(NZDCEM5TotalSignal-ratio*NZDCEM5TotalNoise);
		      ///NZDC-HAD
		      NZDCHADTotal=(NZDCHAD1TotalSignal-ratio*NZDCHAD1TotalNoise)+(NZDCHAD2TotalSignal-ratio*NZDCHAD2TotalNoise)+(NZDCHAD3TotalSignal-ratio*NZDCHAD3TotalNoise)+(NZDCHAD4TotalSignal-ratio*NZDCHAD4TotalNoise); 
		      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ///PZDC Sum
		      PZDCTotal=PZDCEMTotal+PZDCHADTotal;
		      ///NZDC Sum
		      NZDCTotal=NZDCEMTotal+NZDCHADTotal;
		      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ZDCTotal=PZDCTotal+NZDCTotal;
		      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		      ///////////////////////////////////////////
		      ///////////Fill Histograms////////////////
		      /////////////////////////////////////////
		      if (Ndidsaturate==false)
			{
			  histogram_1->Fill(NZDCTotal);
			}
		      if (Pdidsaturate==false)
			{
			  histogram_2->Fill(PZDCTotal);
			}
		      /////////////////////////////////
		      //////////End Fill Histos///////
		      ///////////////////////////////
		    }//End of Event Loop
		  //////////////////////////////////
		  //////////Draw Histos//////////
		  //////////////////////////////
		  TCanvas c1;
		  histogram_1->SetXTitle("N-ZDC Total Charge (fC)");
		  histogram_1->SetYTitle("Counts");
		  histogram_1->GetXaxis()->CenterTitle(1);
		  histogram_1->GetYaxis()->CenterTitle(1);
		  histogram_1->SetLineColor(2);
		  histogram_1->SetTitleOffset(1.13,"Y");
		  gStyle->SetPalette(1);
		  c1->SetLogy(1);
		  gStyle->SetOptStat("ne");
		  histogram_1->Draw();
		    
		  TCanvas c2;
		  histogram_2->SetXTitle("P-ZDC Total Charge (fC)");
		  histogram_2->SetYTitle("Counts");
		  histogram_2->SetLineColor(4);
		  histogram_2->GetXaxis()->CenterTitle(1);
		  histogram_2->GetYaxis()->CenterTitle(1);
		  histogram_2->SetTitleOffset(1.13,"Y");
		  c2->SetLogy(1);
		  histogram_2->Draw();
		  ///////////////////////////////
		  /////////End of Draw Histos////
		  //////////////////////////////

		}//End of ADCVeto==True

	      /////////////////////////////////
	      ////////////////////////////////////
	      else { //Begin ADCVeto==False
		TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS","N-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
		TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC_NS","P-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		    NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		    NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		    NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		    PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		    PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		    PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		    PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		    NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		    NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		    NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		    NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		    NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		    PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		    PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		    PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		    PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		    PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		  
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCEMTotal=0.;
		    PZDCHADTotal=0.;
		    NZDCTotal=0.;
		    NZDCEMTotal=0.;
		    NZDCHADTotal=0.;
		  
		    ///Set All of the Signal/Noise Counters to 0 every event
		  
		    ///PZDC
		    PZDCEM1TotalSignal=0.;
		    PZDCEM1TotalNoise=0.;
		    PZDCEM2TotalSignal=0.;
		    PZDCEM2TotalNoise=0.;
		    PZDCEM3TotalSignal=0.;
		    PZDCEM3TotalNoise=0.;
		    PZDCEM4TotalSignal=0.;
		    PZDCEM4TotalNoise=0.;
		    PZDCEM5TotalSignal=0.;
		    PZDCEM5TotalNoise=0.;
		    PZDCHAD1TotalSignal=0.;
		    PZDCHAD1TotalNoise=0.;
		    PZDCHAD2TotalSignal=0.;
		    PZDCHAD2TotalNoise=0.;
		    PZDCHAD3TotalSignal=0.;
		    PZDCHAD3TotalNoise=0.;
		    PZDCHAD4TotalSignal=0.;
		    PZDCHAD4TotalNoise=0.;
		    ///NZDC
		    NZDCEM1TotalSignal=0.;
		    NZDCEM1TotalNoise=0.;
		    NZDCEM2TotalSignal=0.;
		    NZDCEM2TotalNoise=0.;
		    NZDCEM3TotalSignal=0.;
		    NZDCEM3TotalNoise=0.;
		    NZDCEM4TotalSignal=0.;
		    NZDCEM4TotalNoise=0.;
		    NZDCEM5TotalSignal=0.;
		    NZDCEM5TotalNoise=0.;
		    NZDCHAD1TotalSignal=0.;
		    NZDCHAD1TotalNoise=0.;
		    NZDCHAD2TotalSignal=0.;
		    NZDCHAD2TotalNoise=0.;
		    NZDCHAD3TotalSignal=0.;
		    NZDCHAD3TotalNoise=0.;
		    NZDCHAD4TotalSignal=0.;
		    NZDCHAD4TotalNoise=0.;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			  {
			    //PZDC Noise
			    PZDCEM1TotalNoise+=PEM1fC->GetValue(k);
			    PZDCEM2TotalNoise+=PEM2fC->GetValue(k);
			    PZDCEM3TotalNoise+=PEM3fC->GetValue(k);
			    PZDCEM4TotalNoise+=PEM4fC->GetValue(k);
			    PZDCEM5TotalNoise+=PEM5fC->GetValue(k);
			    PZDCHAD1TotalNoise+=PHAD1fC->GetValue(k);
			    PZDCHAD2TotalNoise+=PHAD2fC->GetValue(k);
			    PZDCHAD3TotalNoise+=PHAD3fC->GetValue(k);
			    PZDCHAD4TotalNoise+=PHAD4fC->GetValue(k);
			    //NZDC Noise
			    NZDCEM1TotalNoise+=NEM1fC->GetValue(k);
			    NZDCEM2TotalNoise+=NEM2fC->GetValue(k);
			    NZDCEM3TotalNoise+=NEM3fC->GetValue(k);
			    NZDCEM4TotalNoise+=NEM4fC->GetValue(k);
			    NZDCEM5TotalNoise+=NEM5fC->GetValue(k);
			    NZDCHAD1TotalNoise+=NHAD1fC->GetValue(k);
			    NZDCHAD2TotalNoise+=NHAD2fC->GetValue(k);
			    NZDCHAD3TotalNoise+=NHAD3fC->GetValue(k);
			    NZDCHAD4TotalNoise+=NHAD4fC->GetValue(k);
			  }//end of ZDC Noise statement
			else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    //PZDC Signal
			    PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
			    PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
			    PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
			    PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
			    PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			    PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
			    PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
			    PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
			    PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			    //NZDC Signal
			    NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
			    NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
			    NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
			    NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
			    NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			    NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
			    NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
			    NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
			    NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		  
		  
		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //PZDC-EM
		    PZDCEMTotal=(PZDCEM1TotalSignal-ratio*PZDCEM1TotalNoise)+(PZDCEM2TotalSignal-ratio*PZDCEM2TotalNoise)+(PZDCEM3TotalSignal-ratio*PZDCEM3TotalNoise)+(PZDCEM4TotalSignal-ratio*PZDCEM4TotalNoise)+(PZDCEM5TotalSignal-ratio*PZDCEM5TotalNoise);
		    ///PZDC-HAD
		    PZDCHADTotal=(PZDCHAD1TotalSignal-ratio*PZDCHAD1TotalNoise)+(PZDCHAD2TotalSignal-ratio*PZDCHAD2TotalNoise)+(PZDCHAD3TotalSignal-ratio*PZDCHAD3TotalNoise)+(PZDCHAD4TotalSignal-ratio*PZDCHAD4TotalNoise);
		    //NZDC-EM
		    NZDCEMTotal=(NZDCEM1TotalSignal-ratio*NZDCEM1TotalNoise)+(NZDCEM2TotalSignal-ratio*NZDCEM2TotalNoise)+(NZDCEM3TotalSignal-ratio*NZDCEM3TotalNoise)+(NZDCEM4TotalSignal-ratio*NZDCEM4TotalNoise)+(NZDCEM5TotalSignal-ratio*NZDCEM5TotalNoise);
		    ///NZDC-HAD
		    NZDCHADTotal=(NZDCHAD1TotalSignal-ratio*NZDCHAD1TotalNoise)+(NZDCHAD2TotalSignal-ratio*NZDCHAD2TotalNoise)+(NZDCHAD3TotalSignal-ratio*NZDCHAD3TotalNoise)+(NZDCHAD4TotalSignal-ratio*NZDCHAD4TotalNoise); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCEMTotal+PZDCHADTotal;
		    ///NZDC Sum
		    NZDCTotal=NZDCEMTotal+NZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal+NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    histogram_1->Fill(NZDCTotal);
		    histogram_2->Fill(PZDCTotal);
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		TCanvas c1;
		histogram_1->SetXTitle("N-ZDC Total Charge (fC)");
		histogram_1->SetYTitle("Counts");
		histogram_1->GetXaxis()->CenterTitle(1);
		histogram_1->GetYaxis()->CenterTitle(1);
		histogram_1->SetLineColor(2);
		histogram_1->SetTitleOffset(1.13,"Y");
		gStyle->SetPalette(1);
		c1->SetLogy(1);
		gStyle->SetOptStat("ne");
		histogram_1->Draw();
	      
		TCanvas c2;
		histogram_2->SetXTitle("P-ZDC Total Charge (fC)");
		histogram_2->SetYTitle("Counts");
		histogram_2->SetLineColor(4);
		histogram_2->GetXaxis()->CenterTitle(1);
		histogram_2->GetYaxis()->CenterTitle(1);
		histogram_2->SetTitleOffset(1.13,"Y");
		c2->SetLogy(1);
		histogram_2->Draw();
		///////////////////////////////
		/////////End of Draw Histos////
		//////////////////////////////
	      
	      }//End of ADCVeto==False
	      /////////////////////////////////
	      ////////////////////////////////////

	    }//End of NoiseSubtract==True
	  ////////////////////////////////
	  ///////////////////////////////

	  ////////////////////////////////////
	  ///////////////////////////////////
	  else { //Begin NoiseSubtract==False
	    if (ADCVeto==1)
	      {
		int pem1adc;
		int pem2adc;
		int pem3adc;
		int pem4adc;
		int pem5adc;
		int phad1adc;
		int phad2adc;
		int phad3adc;
		int phad4adc;
		int nem1adc;
		int nem2adc;
		int nem3adc;
		int nem4adc;
		int nem5adc;
		int nhad1adc;
		int nhad2adc;
		int nhad3adc;
		int nhad4adc;
		bool Pdidsaturate;
		bool Ndidsaturate;
		
		TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_ADCVeto","N-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC_ADCVeto","P-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		    NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		    NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		    NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		    PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		    PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		    PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		    PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		    NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		    NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		    NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		    NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		    NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		    PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		    PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		    PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		    PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		    PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		    
		    ////ADCCounters
		    NHAD1ADC= (TLeaf*)chain->GetLeaf("negHD1ADCtsz");//NHAD1
		    NHAD2ADC= (TLeaf*)chain->GetLeaf("negHD2ADCtsz");//NHAD2
		    NHAD3ADC= (TLeaf*)chain->GetLeaf("negHD3ADCtsz");//NHAD3
		    NHAD4ADC= (TLeaf*)chain->GetLeaf("negHD4ADCtsz");//NHAD4
		    PHAD1ADC= (TLeaf*)chain->GetLeaf("posHD1ADCtsz");//PHAD1
		    PHAD2ADC= (TLeaf*)chain->GetLeaf("posHD2ADCtsz");//PHAD2
		    PHAD3ADC= (TLeaf*)chain->GetLeaf("posHD3ADCtsz");//PHAD3
		    PHAD4ADC= (TLeaf*)chain->GetLeaf("posHD4ADCtsz");//PHAD4
		    NEM1ADC= (TLeaf*)chain->GetLeaf("negEM1ADCtsz");//NEM1
		    NEM2ADC= (TLeaf*)chain->GetLeaf("negEM2ADCtsz");//NEM2
		    NEM3ADC= (TLeaf*)chain->GetLeaf("negEM3ADCtsz");//NEM3
		    NEM4ADC= (TLeaf*)chain->GetLeaf("negEM4ADCtsz");//NEM4
		    NEM5ADC= (TLeaf*)chain->GetLeaf("negEM5ADCtsz");//NEM5
		    PEM1ADC= (TLeaf*)chain->GetLeaf("posEM1ADCtsz");//PEM1
		    PEM2ADC= (TLeaf*)chain->GetLeaf("posEM2ADCtsz");//PEM2
		    PEM3ADC= (TLeaf*)chain->GetLeaf("posEM3ADCtsz");//PEM3
		    PEM4ADC= (TLeaf*)chain->GetLeaf("posEM4ADCtsz");//PEM4
		    PEM5ADC= (TLeaf*)chain->GetLeaf("posEM5ADCtsz");//PEM5

		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCEMTotal=0.;
		    PZDCHADTotal=0.;
		    NZDCTotal=0.;
		    NZDCEMTotal=0.;
		    NZDCHADTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///PZDC
		    PZDCEM1TotalSignal=0.;
		    PZDCEM2TotalSignal=0.;
		    PZDCEM3TotalSignal=0.;
		    PZDCEM4TotalSignal=0.;
		    PZDCEM5TotalSignal=0.;
		    PZDCHAD1TotalSignal=0.;
		    PZDCHAD2TotalSignal=0.;
		    PZDCHAD3TotalSignal=0.;
		    PZDCHAD4TotalSignal=0.;
		    ///NZDC
		    NZDCEM1TotalSignal=0.;
		    NZDCEM2TotalSignal=0.;
		    NZDCEM3TotalSignal=0.;
		    NZDCEM4TotalSignal=0.;
		    NZDCEM5TotalSignal=0.;
		    NZDCHAD1TotalSignal=0.;
		    NZDCHAD2TotalSignal=0.;
		    NZDCHAD3TotalSignal=0.;
		    NZDCHAD4TotalSignal=0.;
		    //ADCCRAP
		    pem1adc=0;
		    pem2adc=0;
		    pem3adc=0;
		    pem4adc=0;
		    pem5adc=0;
		    phad1adc=0;
		    phad2adc=0;
		    phad3adc=0;
		    phad4adc=0;
		    nem1adc=0;
		    nem2adc=0;
		    nem3adc=0;
		    nem4adc=0;
		    nem5adc=0;
		    nhad1adc=0;
		    nhad2adc=0;
		    nhad3adc=0;
		    nhad4adc=0;
		    Pdidsaturate=false;
		    Ndidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    pem1adc=PEM1ADC->GetValue(k);
			    pem2adc=PEM2ADC->GetValue(k);
			    pem3adc=PEM3ADC->GetValue(k);
			    pem4adc=PEM4ADC->GetValue(k);
			    pem5adc=PEM5ADC->GetValue(k);
			    phad1adc=PHAD1ADC->GetValue(k);
			    //	    std::cout<<phad1adc<<std::endl;
			    phad2adc=PHAD2ADC->GetValue(k);
			    phad3adc=PHAD3ADC->GetValue(k);
			    phad4adc=PHAD4ADC->GetValue(k);
			    nem1adc=NEM1ADC->GetValue(k);
			    nem2adc=NEM2ADC->GetValue(k);
			    nem3adc=NEM3ADC->GetValue(k);
			    nem4adc=NEM4ADC->GetValue(k);
			    nem5adc=NEM5ADC->GetValue(k);
			    nhad1adc=NHAD1ADC->GetValue(k);
			    nhad2adc=NHAD2ADC->GetValue(k);
			    nhad3adc=NHAD3ADC->GetValue(k);
			    nhad4adc=NHAD4ADC->GetValue(k);
			    //PZDC Signal
			    if ((pem1adc!=127) && (pem2adc!=127) && (pem3adc!=127) && (pem4adc!=127) && (pem5adc!=127) && (phad1adc!=127) && (phad2adc!=127) && (phad3adc!=127) && (phad4adc!=127))
			      {
				PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
				PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
				PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
				PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
				PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
				PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
				PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
				PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
				PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			      }
			    else {
			      Pdidsaturate=true;
			    }
			    //NZDC Signal
			    if ((nem1adc!=127) && (nem2adc!=127) && (nem3adc!=127) && (nem4adc!=127) && (nem5adc!=127) && (nhad1adc!=127) && (nhad2adc!=127) && (nhad3adc!=127) &&  (nhad4adc!=127))
			      {
				NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
				NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
				NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
				NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
				NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
				NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
				NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
				NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
				NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			      }
			    else {
			      Ndidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //PZDC-EM
		    PZDCEMTotal=(PZDCEM1TotalSignal)+(PZDCEM2TotalSignal)+(PZDCEM3TotalSignal)+(PZDCEM4TotalSignal)+(PZDCEM5TotalSignal);
		    ///PZDC-HAD
		    PZDCHADTotal=(PZDCHAD1TotalSignal)+(PZDCHAD2TotalSignal)+(PZDCHAD3TotalSignal)+(PZDCHAD4TotalSignal);
		    //NZDC-EM
		    NZDCEMTotal=(NZDCEM1TotalSignal)+(NZDCEM2TotalSignal)+(NZDCEM3TotalSignal)+(NZDCEM4TotalSignal)+(NZDCEM5TotalSignal);
		    ///NZDC-HAD
		    NZDCHADTotal=(NZDCHAD1TotalSignal)+(NZDCHAD2TotalSignal)+(NZDCHAD3TotalSignal)+(NZDCHAD4TotalSignal); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCEMTotal+PZDCHADTotal;
		    ///NZDC Sum
		    NZDCTotal=NZDCEMTotal+NZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal+NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Ndidsaturate==false)
		      {
			histogram_1->Fill(NZDCTotal);
		      }
		    if (Pdidsaturate==false)
		      {
			histogram_2->Fill(PZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		TCanvas c1;
		histogram_1->SetXTitle("N-ZDC Total Charge (fC)");
		histogram_1->SetYTitle("Counts");
		histogram_1->GetXaxis()->CenterTitle(1);
		histogram_1->GetYaxis()->CenterTitle(1);
		histogram_1->SetLineColor(2);
		histogram_1->SetTitleOffset(1.13,"Y");
		gStyle->SetPalette(1);
		c1->SetLogy(1);
		gStyle->SetOptStat("ne");
		histogram_1->Draw();
		    
		TCanvas c2;
		histogram_2->SetXTitle("P-ZDC Total Charge (fC)");
		histogram_2->SetYTitle("Counts");
		histogram_2->SetLineColor(4);
		histogram_2->GetXaxis()->CenterTitle(1);
		histogram_2->GetYaxis()->CenterTitle(1);
		histogram_2->SetTitleOffset(1.13,"Y");
		c2->SetLogy(1);
		histogram_2->Draw();
		///////////////////////////////
		/////////End of Draw Histos////
		//////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC","N-ZDC_1D_fC", 200, 0.0, 10000.0);
	      TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC","P-ZDC_1D_fC", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		  NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		  NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		  NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		  PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		  PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		  PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		  PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		  NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		  NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		  NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		  NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		  NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		  PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		  PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		  PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		  PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		  PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		  
		  ZDCTotal=0.;
		  PZDCTotal=0.;
		  PZDCEMTotal=0.;
		  PZDCHADTotal=0.;
		  NZDCTotal=0.;
		  NZDCEMTotal=0.;
		  NZDCHADTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///PZDC
		  PZDCEM1TotalSignal=0.;
		  PZDCEM2TotalSignal=0.;
		  PZDCEM3TotalSignal=0.;
		  PZDCEM4TotalSignal=0.;
		  PZDCEM5TotalSignal=0.;
		  PZDCHAD1TotalSignal=0.;
		  PZDCHAD2TotalSignal=0.;
		  PZDCHAD3TotalSignal=0.;
		  PZDCHAD4TotalSignal=0.;
		  ///NZDC
		  NZDCEM1TotalSignal=0.;
		  NZDCEM2TotalSignal=0.;
		  NZDCEM3TotalSignal=0.;
		  NZDCEM4TotalSignal=0.;
		  NZDCEM5TotalSignal=0.;
		  NZDCHAD1TotalSignal=0.;
		  NZDCHAD2TotalSignal=0.;
		  NZDCHAD3TotalSignal=0.;
		  NZDCHAD4TotalSignal=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //PZDC Signal
			  PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
			  PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
			  PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
			  PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
			  PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			  PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
			  PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
			  PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
			  PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			  //NZDC Signal
			  NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
			  NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
			  NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
			  NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
			  NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			  NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
			  NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
			  NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
			  NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  //PZDC-EM
		  PZDCEMTotal=(PZDCEM1TotalSignal)+(PZDCEM2TotalSignal)+(PZDCEM3TotalSignal)+(PZDCEM4TotalSignal)+(PZDCEM5TotalSignal);
		  ///PZDC-HAD
		  PZDCHADTotal=(PZDCHAD1TotalSignal)+(PZDCHAD2TotalSignal)+(PZDCHAD3TotalSignal)+(PZDCHAD4TotalSignal);
		  //NZDC-EM
		  NZDCEMTotal=(NZDCEM1TotalSignal)+(NZDCEM2TotalSignal)+(NZDCEM3TotalSignal)+(NZDCEM4TotalSignal)+(NZDCEM5TotalSignal);
		  ///NZDC-HAD
		  NZDCHADTotal=(NZDCHAD1TotalSignal)+(NZDCHAD2TotalSignal)+(NZDCHAD3TotalSignal)+(NZDCHAD4TotalSignal); 
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///PZDC Sum
		  PZDCTotal=PZDCEMTotal+PZDCHADTotal;
		  ///NZDC Sum
		  NZDCTotal=NZDCEMTotal+NZDCHADTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=PZDCTotal+NZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(NZDCTotal);
		  histogram_2->Fill(PZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("N-ZDC Total Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      
	      TCanvas c2;
	      histogram_2->SetXTitle("P-ZDC Total Charge (fC)");
	      histogram_2->SetYTitle("Counts");
	      histogram_2->SetLineColor(4);
	      histogram_2->GetXaxis()->CenterTitle(1);
	      histogram_2->GetYaxis()->CenterTitle(1);
	      histogram_2->SetTitleOffset(1.13,"Y");
	      c2->SetLogy(1);
	      histogram_2->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==False
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////
	/////////////////////////////////
	}//End of EM&HAD==True

      ////////////////////////////////
      //////////////////////////////
      else if (EM==1 && HAD==0)
	{////Begin EM ONLY
	  double PZDCEM1TotalSignal;
	  double PZDCEM2TotalSignal;
	  double PZDCEM3TotalSignal;
	  double PZDCEM4TotalSignal;
	  double PZDCEM5TotalSignal;
	  ///NZDC
	  double NZDCEM1TotalSignal;
	  double NZDCEM2TotalSignal;
	  double NZDCEM3TotalSignal;
	  double NZDCEM4TotalSignal;
	  double NZDCEM5TotalSignal;
	  if (NoiseSubtract==true)
	    {
	      double PZDCEM1TotalNoise;
	      double PZDCEM2TotalNoise;
	      double PZDCEM3TotalNoise;
	      double PZDCEM4TotalNoise;
	      double PZDCEM5TotalNoise;
	      ///NZDC
	      double NZDCEM1TotalNoise;
	      double NZDCEM2TotalNoise;
	      double NZDCEM3TotalNoise;
	      double NZDCEM4TotalNoise;
	      double NZDCEM5TotalNoise;
	      if (ADCVeto==1)
		{
		  int pem1adc;
		  int pem2adc;
		  int pem3adc;
		  int pem4adc;
		  int pem5adc;
		  int nem1adc;
		  int nem2adc;
		  int nem3adc;
		  int nem4adc;
		  int nem5adc;
		  bool Pdidsaturate;
		  bool Ndidsaturate;
		
		  TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS_ADCVeto","N-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		  TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC_NS_ADCVeto","P-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		  std::cout<<"Starting the analysis now"<<std::endl;
		  for (int i=0;i<EventsToAnalyze;i++)
		    {
		      chain->GetEntry(i);
		      //ZDC Leaves
		      NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		      NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		      NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		      NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		      NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		      PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		      PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		      PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		      PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		      PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		    
		      ////ADCCounters
		      NEM1ADC= (TLeaf*)chain->GetLeaf("negEM1ADCtsz");//NEM1
		      NEM2ADC= (TLeaf*)chain->GetLeaf("negEM2ADCtsz");//NEM2
		      NEM3ADC= (TLeaf*)chain->GetLeaf("negEM3ADCtsz");//NEM3
		      NEM4ADC= (TLeaf*)chain->GetLeaf("negEM4ADCtsz");//NEM4
		      NEM5ADC= (TLeaf*)chain->GetLeaf("negEM5ADCtsz");//NEM5
		      PEM1ADC= (TLeaf*)chain->GetLeaf("posEM1ADCtsz");//PEM1
		      PEM2ADC= (TLeaf*)chain->GetLeaf("posEM2ADCtsz");//PEM2
		      PEM3ADC= (TLeaf*)chain->GetLeaf("posEM3ADCtsz");//PEM3
		      PEM4ADC= (TLeaf*)chain->GetLeaf("posEM4ADCtsz");//PEM4
		      PEM5ADC= (TLeaf*)chain->GetLeaf("posEM5ADCtsz");//PEM5
		    
		      ZDCTotal=0.;
		      PZDCTotal=0.;
		      PZDCEMTotal=0.;
		      NZDCTotal=0.;
		      NZDCEMTotal=0.;
		    		    
		      ///Set All of the Signal/Noise Counters to 0 every event
		    
		      ///PZDC
		      PZDCEM1TotalSignal=0.;
		      PZDCEM1TotalNoise=0.;
		      PZDCEM2TotalSignal=0.;
		      PZDCEM2TotalNoise=0.;
		      PZDCEM3TotalSignal=0.;
		      PZDCEM3TotalNoise=0.;
		      PZDCEM4TotalSignal=0.;
		      PZDCEM4TotalNoise=0.;
		      PZDCEM5TotalSignal=0.;
		      PZDCEM5TotalNoise=0.;
		      ///NZDC
		      NZDCEM1TotalSignal=0.;
		      NZDCEM1TotalNoise=0.;
		      NZDCEM2TotalSignal=0.;
		      NZDCEM2TotalNoise=0.;
		      NZDCEM3TotalSignal=0.;
		      NZDCEM3TotalNoise=0.;
		      NZDCEM4TotalSignal=0.;
		      NZDCEM4TotalNoise=0.;
		      NZDCEM5TotalSignal=0.;
		      NZDCEM5TotalNoise=0.;
		      //ADCCRAP
		      pem1adc=0;
		      pem2adc=0;
		      pem3adc=0;
		      pem4adc=0;
		      pem5adc=0;
		      nem1adc=0;
		      nem2adc=0;
		      nem3adc=0;
		      nem4adc=0;
		      nem5adc=0;
		      Pdidsaturate=false;
		      Ndidsaturate=false;
		      for (int k=0;k<10;k++)//adding up the values for ZDC signal
			{
			  if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			    {
			      //PZDC Noise
			      PZDCEM1TotalNoise+=PEM1fC->GetValue(k);
			      PZDCEM2TotalNoise+=PEM2fC->GetValue(k);
			      PZDCEM3TotalNoise+=PEM3fC->GetValue(k);
			      PZDCEM4TotalNoise+=PEM4fC->GetValue(k);
			      PZDCEM5TotalNoise+=PEM5fC->GetValue(k);
			      //NZDC Noise
			      NZDCEM1TotalNoise+=NEM1fC->GetValue(k);
			      NZDCEM2TotalNoise+=NEM2fC->GetValue(k);
			      NZDCEM3TotalNoise+=NEM3fC->GetValue(k);
			      NZDCEM4TotalNoise+=NEM4fC->GetValue(k);
			      NZDCEM5TotalNoise+=NEM5fC->GetValue(k);
			    }//end of ZDC Noise statement
			  else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			    {
			      pem1adc=PEM1ADC->GetValue(k);
			      pem2adc=PEM2ADC->GetValue(k);
			      pem3adc=PEM3ADC->GetValue(k);
			      pem4adc=PEM4ADC->GetValue(k);
			      pem5adc=PEM5ADC->GetValue(k);
			      nem1adc=NEM1ADC->GetValue(k);
			      nem2adc=NEM2ADC->GetValue(k);
			      nem3adc=NEM3ADC->GetValue(k);
			      nem4adc=NEM4ADC->GetValue(k);
			      nem5adc=NEM5ADC->GetValue(k);
			      //PZDC Signal
			      if ((pem1adc!=127) && (pem2adc!=127) && (pem3adc!=127) && (pem4adc!=127) && (pem5adc!=127))
				{
				  PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
				  PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
				  PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
				  PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
				  PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
				}
			      else {
				Pdidsaturate=true;
			      }
			      //NZDC Signal
			      if ((nem1adc!=127) && (nem2adc!=127) && (nem3adc!=127) && (nem4adc!=127) && (nem5adc!=127))
				{
				  NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
				  NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
				  NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
				  NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
				  NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
				}
			      else {
				Ndidsaturate=true;
			      }
			    }//End of ZDC Signal TS's
			}//end of ZDC TS loop
		    

		      ///////////////////////////////////////////////////////
		      //////////////MAKING SUMS/////////////////////////////
		      /////////////////////////////////////////////////////
		      //PZDC-EM
		      PZDCEMTotal=(PZDCEM1TotalSignal-ratio*PZDCEM1TotalNoise)+(PZDCEM2TotalSignal-ratio*PZDCEM2TotalNoise)+(PZDCEM3TotalSignal-ratio*PZDCEM3TotalNoise)+(PZDCEM4TotalSignal-ratio*PZDCEM4TotalNoise)+(PZDCEM5TotalSignal-ratio*PZDCEM5TotalNoise);
		      //NZDC-EM
		      NZDCEMTotal=(NZDCEM1TotalSignal-ratio*NZDCEM1TotalNoise)+(NZDCEM2TotalSignal-ratio*NZDCEM2TotalNoise)+(NZDCEM3TotalSignal-ratio*NZDCEM3TotalNoise)+(NZDCEM4TotalSignal-ratio*NZDCEM4TotalNoise)+(NZDCEM5TotalSignal-ratio*NZDCEM5TotalNoise);
		      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ///PZDC Sum
		      PZDCTotal=PZDCEMTotal;
		      ///NZDC Sum
		      NZDCTotal=NZDCEMTotal;
		      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ZDCTotal=PZDCTotal+NZDCTotal;
		      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		      ///////////////////////////////////////////
		      ///////////Fill Histograms////////////////
		      /////////////////////////////////////////
		      if (Ndidsaturate==false)
			{
			  histogram_1->Fill(NZDCTotal);
			}
		      if (Pdidsaturate==false)
			{
			  histogram_2->Fill(PZDCTotal);
			}
		      /////////////////////////////////
		      //////////End Fill Histos///////
		      ///////////////////////////////
		    }//End of Event Loop

		  //////////////////////////////////
		  //////////Draw Histos//////////
		  //////////////////////////////
		  TCanvas c1;
		  histogram_1->SetXTitle("N-ZDC EM Charge (fC)");
		  histogram_1->SetYTitle("Counts");
		  histogram_1->GetXaxis()->CenterTitle(1);
		  histogram_1->GetYaxis()->CenterTitle(1);
		  histogram_1->SetLineColor(2);
		  histogram_1->SetTitleOffset(1.13,"Y");
		  gStyle->SetPalette(1);
		  c1->SetLogy(1);
		  gStyle->SetOptStat("ne");
		  histogram_1->Draw();
		    
		  TCanvas c2;
		  histogram_2->SetXTitle("P-ZDC EM Charge (fC)");
		  histogram_2->SetYTitle("Counts");
		  histogram_2->SetLineColor(4);
		  histogram_2->GetXaxis()->CenterTitle(1);
		  histogram_2->GetYaxis()->CenterTitle(1);
		  histogram_2->SetTitleOffset(1.13,"Y");
		  c2->SetLogy(1);
		  histogram_2->Draw();
		  ///////////////////////////////
		  /////////End of Draw Histos////
		  //////////////////////////////

		}//End of ADCVeto==True
	      /////////////////////////////////
	      ////////////////////////////////////
	      else { //Begin ADCVeto==False
		TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS","N-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
		TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC_NS","P-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		    NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		    NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		    NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		    NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		    PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		    PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		    PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		    PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		    PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		  
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCEMTotal=0.;
		    NZDCTotal=0.;
		    NZDCEMTotal=0.;
		  
		    ///Set All of the Signal/Noise Counters to 0 every event
		  
		    ///PZDC
		    PZDCEM1TotalSignal=0.;
		    PZDCEM1TotalNoise=0.;
		    PZDCEM2TotalSignal=0.;
		    PZDCEM2TotalNoise=0.;
		    PZDCEM3TotalSignal=0.;
		    PZDCEM3TotalNoise=0.;
		    PZDCEM4TotalSignal=0.;
		    PZDCEM4TotalNoise=0.;
		    PZDCEM5TotalSignal=0.;
		    PZDCEM5TotalNoise=0.;
		    ///NZDC
		    NZDCEM1TotalSignal=0.;
		    NZDCEM1TotalNoise=0.;
		    NZDCEM2TotalSignal=0.;
		    NZDCEM2TotalNoise=0.;
		    NZDCEM3TotalSignal=0.;
		    NZDCEM3TotalNoise=0.;
		    NZDCEM4TotalSignal=0.;
		    NZDCEM4TotalNoise=0.;
		    NZDCEM5TotalSignal=0.;
		    NZDCEM5TotalNoise=0.;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			  {
			    //PZDC Noise
			    PZDCEM1TotalNoise+=PEM1fC->GetValue(k);
			    PZDCEM2TotalNoise+=PEM2fC->GetValue(k);
			    PZDCEM3TotalNoise+=PEM3fC->GetValue(k);
			    PZDCEM4TotalNoise+=PEM4fC->GetValue(k);
			    PZDCEM5TotalNoise+=PEM5fC->GetValue(k);
			    //NZDC Noise
			    NZDCEM1TotalNoise+=NEM1fC->GetValue(k);
			    NZDCEM2TotalNoise+=NEM2fC->GetValue(k);
			    NZDCEM3TotalNoise+=NEM3fC->GetValue(k);
			    NZDCEM4TotalNoise+=NEM4fC->GetValue(k);
			    NZDCEM5TotalNoise+=NEM5fC->GetValue(k);
			  }//end of ZDC Noise statement
			else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    //PZDC Signal
			    PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
			    PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
			    PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
			    PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
			    PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			    //NZDC Signal
			    NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
			    NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
			    NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
			    NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
			    NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		  
		  
		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //PZDC-EM
		    PZDCEMTotal=(PZDCEM1TotalSignal-ratio*PZDCEM1TotalNoise)+(PZDCEM2TotalSignal-ratio*PZDCEM2TotalNoise)+(PZDCEM3TotalSignal-ratio*PZDCEM3TotalNoise)+(PZDCEM4TotalSignal-ratio*PZDCEM4TotalNoise)+(PZDCEM5TotalSignal-ratio*PZDCEM5TotalNoise);
		    //NZDC-EM
		    NZDCEMTotal=(NZDCEM1TotalSignal-ratio*NZDCEM1TotalNoise)+(NZDCEM2TotalSignal-ratio*NZDCEM2TotalNoise)+(NZDCEM3TotalSignal-ratio*NZDCEM3TotalNoise)+(NZDCEM4TotalSignal-ratio*NZDCEM4TotalNoise)+(NZDCEM5TotalSignal-ratio*NZDCEM5TotalNoise);
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCEMTotal;
		    ///NZDC Sum
		    NZDCTotal=NZDCEMTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal+NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    histogram_1->Fill(NZDCTotal);
		    histogram_2->Fill(PZDCTotal);
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop

		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		TCanvas c1;
		histogram_1->SetXTitle("N-ZDC EM Charge (fC)");
		histogram_1->SetYTitle("Counts");
		histogram_1->GetXaxis()->CenterTitle(1);
		histogram_1->GetYaxis()->CenterTitle(1);
		histogram_1->SetLineColor(2);
		histogram_1->SetTitleOffset(1.13,"Y");
		gStyle->SetPalette(1);
		c1->SetLogy(1);
		gStyle->SetOptStat("ne");
		histogram_1->Draw();
	      
		TCanvas c2;
		histogram_2->SetXTitle("P-ZDC EM Charge (fC)");
		histogram_2->SetYTitle("Counts");
		histogram_2->SetLineColor(4);
		histogram_2->GetXaxis()->CenterTitle(1);
		histogram_2->GetYaxis()->CenterTitle(1);
		histogram_2->SetTitleOffset(1.13,"Y");
		c2->SetLogy(1);
		histogram_2->Draw();
		///////////////////////////////
		/////////End of Draw Histos////
		//////////////////////////////
	      
	      }//End of ADCVeto==False
	      /////////////////////////////////
	      ////////////////////////////////////

	    }//End of NoiseSubtract==True
	  ////////////////////////////////
	  ///////////////////////////////

	  ////////////////////////////////////
	  ///////////////////////////////////
	  else { //Begin NoiseSubtract==False
	    if (ADCVeto==1)
	      {
		int pem1adc;
		int pem2adc;
		int pem3adc;
		int pem4adc;
		int pem5adc;
		int nem1adc;
		int nem2adc;
		int nem3adc;
		int nem4adc;
		int nem5adc;
		bool Pdidsaturate;
		bool Ndidsaturate;
		
		TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_ADCVeto","N-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC_ADCVeto","P-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		    NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		    NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		    NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		    NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		    PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		    PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		    PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		    PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		    PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		    
		    ////ADCCounters
		    NEM1ADC= (TLeaf*)chain->GetLeaf("negEM1ADCtsz");//NEM1
		    NEM2ADC= (TLeaf*)chain->GetLeaf("negEM2ADCtsz");//NEM2
		    NEM3ADC= (TLeaf*)chain->GetLeaf("negEM3ADCtsz");//NEM3
		    NEM4ADC= (TLeaf*)chain->GetLeaf("negEM4ADCtsz");//NEM4
		    NEM5ADC= (TLeaf*)chain->GetLeaf("negEM5ADCtsz");//NEM5
		    PEM1ADC= (TLeaf*)chain->GetLeaf("posEM1ADCtsz");//PEM1
		    PEM2ADC= (TLeaf*)chain->GetLeaf("posEM2ADCtsz");//PEM2
		    PEM3ADC= (TLeaf*)chain->GetLeaf("posEM3ADCtsz");//PEM3
		    PEM4ADC= (TLeaf*)chain->GetLeaf("posEM4ADCtsz");//PEM4
		    PEM5ADC= (TLeaf*)chain->GetLeaf("posEM5ADCtsz");//PEM5
		    
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCEMTotal=0.;
		    NZDCTotal=0.;
		    NZDCEMTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///PZDC
		    PZDCEM1TotalSignal=0.;
		    PZDCEM2TotalSignal=0.;
		    PZDCEM3TotalSignal=0.;
		    PZDCEM4TotalSignal=0.;
		    PZDCEM5TotalSignal=0.;
		    ///NZDC
		    NZDCEM1TotalSignal=0.;
		    NZDCEM2TotalSignal=0.;
		    NZDCEM3TotalSignal=0.;
		    NZDCEM4TotalSignal=0.;
		    NZDCEM5TotalSignal=0.;
		    //ADCCRAP
		    pem1adc=0;
		    pem2adc=0;
		    pem3adc=0;
		    pem4adc=0;
		    pem5adc=0;
		    nem1adc=0;
		    nem2adc=0;
		    nem3adc=0;
		    nem4adc=0;
		    nem5adc=0;
		    Pdidsaturate=false;
		    Ndidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    pem1adc=PEM1ADC->GetValue(k);
			    pem2adc=PEM2ADC->GetValue(k);
			    pem3adc=PEM3ADC->GetValue(k);
			    pem4adc=PEM4ADC->GetValue(k);
			    pem5adc=PEM5ADC->GetValue(k);
			    nem1adc=NEM1ADC->GetValue(k);
			    nem2adc=NEM2ADC->GetValue(k);
			    nem3adc=NEM3ADC->GetValue(k);
			    nem4adc=NEM4ADC->GetValue(k);
			    nem5adc=NEM5ADC->GetValue(k);
			    //PZDC Signal
			    if ((pem1adc!=127) && (pem2adc!=127) && (pem3adc!=127) && (pem4adc!=127) && (pem5adc!=127))
			      {
				PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
				PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
				PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
				PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
				PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			      }
			    else {
			      Pdidsaturate=true;
			    }
			    //NZDC Signal
			    if ((nem1adc!=127) && (nem2adc!=127) && (nem3adc!=127) && (nem4adc!=127) && (nem5adc!=127))
			      {
				NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
				NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
				NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
				NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
				NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			      }
			    else {
			      Ndidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //PZDC-EM
		    PZDCEMTotal=(PZDCEM1TotalSignal)+(PZDCEM2TotalSignal)+(PZDCEM3TotalSignal)+(PZDCEM4TotalSignal)+(PZDCEM5TotalSignal);
		    //NZDC-EM
		    NZDCEMTotal=(NZDCEM1TotalSignal)+(NZDCEM2TotalSignal)+(NZDCEM3TotalSignal)+(NZDCEM4TotalSignal)+(NZDCEM5TotalSignal);
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCEMTotal;
		    ///NZDC Sum
		    NZDCTotal=NZDCEMTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal+NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Ndidsaturate==false)
		      {
			histogram_1->Fill(NZDCTotal);
		      }
		    if (Pdidsaturate==false)
		      {
			histogram_2->Fill(PZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		TCanvas c1;
		histogram_1->SetXTitle("N-ZDC EM Charge (fC)");
		histogram_1->SetYTitle("Counts");
		histogram_1->GetXaxis()->CenterTitle(1);
		histogram_1->GetYaxis()->CenterTitle(1);
		histogram_1->SetLineColor(2);
		histogram_1->SetTitleOffset(1.13,"Y");
		gStyle->SetPalette(1);
		c1->SetLogy(1);
		gStyle->SetOptStat("ne");
		histogram_1->Draw();
		    
		TCanvas c2;
		histogram_2->SetXTitle("P-ZDC EM Charge (fC)");
		histogram_2->SetYTitle("Counts");
		histogram_2->SetLineColor(4);
		histogram_2->GetXaxis()->CenterTitle(1);
		histogram_2->GetYaxis()->CenterTitle(1);
		histogram_2->SetTitleOffset(1.13,"Y");
		c2->SetLogy(1);
		histogram_2->Draw();
		///////////////////////////////
		/////////End of Draw Histos////
		//////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC","N-ZDC_1D_fC", 200, 0.0, 10000.0);
	      TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC","P-ZDC_1D_fC", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		  NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		  NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		  NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		  NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		  PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		  PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		  PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		  PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		  PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		  
		  ZDCTotal=0.;
		  PZDCTotal=0.;
		  PZDCEMTotal=0.;
		  NZDCTotal=0.;
		  NZDCEMTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///PZDC
		  PZDCEM1TotalSignal=0.;
		  PZDCEM2TotalSignal=0.;
		  PZDCEM3TotalSignal=0.;
		  PZDCEM4TotalSignal=0.;
		  PZDCEM5TotalSignal=0.;
		  ///NZDC
		  NZDCEM1TotalSignal=0.;
		  NZDCEM2TotalSignal=0.;
		  NZDCEM3TotalSignal=0.;
		  NZDCEM4TotalSignal=0.;
		  NZDCEM5TotalSignal=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //PZDC Signal
			  PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
			  PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
			  PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
			  PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
			  PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			  //NZDC Signal
			  NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
			  NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
			  NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
			  NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
			  NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  //PZDC-EM
		  PZDCEMTotal=(PZDCEM1TotalSignal)+(PZDCEM2TotalSignal)+(PZDCEM3TotalSignal)+(PZDCEM4TotalSignal)+(PZDCEM5TotalSignal);
		  //NZDC-EM
		  NZDCEMTotal=(NZDCEM1TotalSignal)+(NZDCEM2TotalSignal)+(NZDCEM3TotalSignal)+(NZDCEM4TotalSignal)+(NZDCEM5TotalSignal);
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///PZDC Sum
		  PZDCTotal=PZDCEMTotal;
		  ///NZDC Sum
		  NZDCTotal=NZDCEMTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=PZDCTotal+NZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(NZDCTotal);
		  histogram_2->Fill(PZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("N-ZDC EM Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      
	      TCanvas c2;
	      histogram_2->SetXTitle("P-ZDC EM Charge (fC)");
	      histogram_2->SetYTitle("Counts");
	      histogram_2->SetLineColor(4);
	      histogram_2->GetXaxis()->CenterTitle(1);
	      histogram_2->GetYaxis()->CenterTitle(1);
	      histogram_2->SetTitleOffset(1.13,"Y");
	      c2->SetLogy(1);
	      histogram_2->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==False
	  ////////////////////////////////
	  ///////////////////////////////

	  ////////////////////////////////
	  /////////////////////////////////
	}//End of EM ONLY

      //////////////////////////////////////
      /////////////////////////////////////

      ////////////////////////////
      /////////////////////////////
      else if(EM==0 && HAD==1)
	{//Begin HAD Only
	  double PZDCHAD1TotalSignal;
	  double PZDCHAD2TotalSignal;
	  double PZDCHAD3TotalSignal;
	  double PZDCHAD4TotalSignal;
	  ///NZDC
	  double NZDCHAD1TotalSignal;
	  double NZDCHAD2TotalSignal;
	  double NZDCHAD3TotalSignal;
	  double NZDCHAD4TotalSignal;
	  if (NoiseSubtract==true)
	    {
	      double PZDCHAD1TotalNoise;
	      double PZDCHAD2TotalNoise;
	      double PZDCHAD3TotalNoise;
	      double PZDCHAD4TotalNoise;
	      ///NZDC
	      double NZDCHAD1TotalNoise;
	      double NZDCHAD2TotalNoise;
	      double NZDCHAD3TotalNoise;
	      double NZDCHAD4TotalNoise;
	      if (ADCVeto==1)
		{
		  int phad1adc;
		  int phad2adc;
		  int phad3adc;
		  int phad4adc;
		  int nhad1adc;
		  int nhad2adc;
		  int nhad3adc;
		  int nhad4adc;
		  bool Pdidsaturate;
		  bool Ndidsaturate;
		
		  TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS_ADCVeto","N-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		  TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC_NS_ADCVeto","P-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		  std::cout<<"Starting the analysis now"<<std::endl;
		  for (int i=0;i<EventsToAnalyze;i++)
		    {
		      chain->GetEntry(i);
		      //ZDC Leaves
		      NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		      NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		      NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		      NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		      PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		      PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		      PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		      PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		    		    
		      ////ADCCounters
		      NHAD1ADC= (TLeaf*)chain->GetLeaf("negHD1ADCtsz");//NHAD1
		      NHAD2ADC= (TLeaf*)chain->GetLeaf("negHD2ADCtsz");//NHAD2
		      NHAD3ADC= (TLeaf*)chain->GetLeaf("negHD3ADCtsz");//NHAD3
		      NHAD4ADC= (TLeaf*)chain->GetLeaf("negHD4ADCtsz");//NHAD4
		      PHAD1ADC= (TLeaf*)chain->GetLeaf("posHD1ADCtsz");//PHAD1
		      PHAD2ADC= (TLeaf*)chain->GetLeaf("posHD2ADCtsz");//PHAD2
		      PHAD3ADC= (TLeaf*)chain->GetLeaf("posHD3ADCtsz");//PHAD3
		      PHAD4ADC= (TLeaf*)chain->GetLeaf("posHD4ADCtsz");//PHAD4
		    
		      ZDCTotal=0.;
		      PZDCTotal=0.;
		      PZDCHADTotal=0.;
		      NZDCTotal=0.;
		      NZDCHADTotal=0.;
		    
		      ///Set All of the Signal/Noise Counters to 0 every event
		    
		      ///PZDC
		      PZDCHAD1TotalSignal=0.;
		      PZDCHAD1TotalNoise=0.;
		      PZDCHAD2TotalSignal=0.;
		      PZDCHAD2TotalNoise=0.;
		      PZDCHAD3TotalSignal=0.;
		      PZDCHAD3TotalNoise=0.;
		      PZDCHAD4TotalSignal=0.;
		      PZDCHAD4TotalNoise=0.;
		      ///NZDC
		      NZDCHAD1TotalSignal=0.;
		      NZDCHAD1TotalNoise=0.;
		      NZDCHAD2TotalSignal=0.;
		      NZDCHAD2TotalNoise=0.;
		      NZDCHAD3TotalSignal=0.;
		      NZDCHAD3TotalNoise=0.;
		      NZDCHAD4TotalSignal=0.;
		      NZDCHAD4TotalNoise=0.;
		      //ADCCRAP
		      phad1adc=0;
		      phad2adc=0;
		      phad3adc=0;
		      phad4adc=0;
		      nhad1adc=0;
		      nhad2adc=0;
		      nhad3adc=0;
		      nhad4adc=0;
		      Pdidsaturate=false;
		      Ndidsaturate=false;
		      for (int k=0;k<10;k++)//adding up the values for ZDC signal
			{
			  if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			    {
			      //PZDC Noise
			      PZDCHAD1TotalNoise+=PHAD1fC->GetValue(k);
			      PZDCHAD2TotalNoise+=PHAD2fC->GetValue(k);
			      PZDCHAD3TotalNoise+=PHAD3fC->GetValue(k);
			      PZDCHAD4TotalNoise+=PHAD4fC->GetValue(k);
			      //NZDC Noise
			      NZDCHAD1TotalNoise+=NHAD1fC->GetValue(k);
			      NZDCHAD2TotalNoise+=NHAD2fC->GetValue(k);
			      NZDCHAD3TotalNoise+=NHAD3fC->GetValue(k);
			      NZDCHAD4TotalNoise+=NHAD4fC->GetValue(k);
			    }//end of ZDC Noise statement
			  else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			    {
			      phad1adc=PHAD1ADC->GetValue(k);
			      //	    std::cout<<phad1adc<<std::endl;
			      phad2adc=PHAD2ADC->GetValue(k);
			      phad3adc=PHAD3ADC->GetValue(k);
			      phad4adc=PHAD4ADC->GetValue(k);
			      nhad1adc=NHAD1ADC->GetValue(k);
			      nhad2adc=NHAD2ADC->GetValue(k);
			      nhad3adc=NHAD3ADC->GetValue(k);
			      nhad4adc=NHAD4ADC->GetValue(k);
			      //PZDC Signal
			      if ((phad1adc!=127) && (phad2adc!=127) && (phad3adc!=127) && (phad4adc!=127))
				{
				  PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
				  PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
				  PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
				  PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
				}
			      else {
				Pdidsaturate=true;
			      }
			      //NZDC Signal
			      if ((nhad1adc!=127) && (nhad2adc!=127) && (nhad3adc!=127) &&  (nhad4adc!=127))
				{
				  NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
				  NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
				  NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
				  NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
				}
			      else {
				Ndidsaturate=true;
			      }
			    }//End of ZDC Signal TS's
			}//end of ZDC TS loop
		    

		      ///////////////////////////////////////////////////////
		      //////////////MAKING SUMS/////////////////////////////
		      /////////////////////////////////////////////////////
		      ///PZDC-HAD
		      PZDCHADTotal=(PZDCHAD1TotalSignal-ratio*PZDCHAD1TotalNoise)+(PZDCHAD2TotalSignal-ratio*PZDCHAD2TotalNoise)+(PZDCHAD3TotalSignal-ratio*PZDCHAD3TotalNoise)+(PZDCHAD4TotalSignal-ratio*PZDCHAD4TotalNoise);
		      ///NZDC-HAD
		      NZDCHADTotal=(NZDCHAD1TotalSignal-ratio*NZDCHAD1TotalNoise)+(NZDCHAD2TotalSignal-ratio*NZDCHAD2TotalNoise)+(NZDCHAD3TotalSignal-ratio*NZDCHAD3TotalNoise)+(NZDCHAD4TotalSignal-ratio*NZDCHAD4TotalNoise); 
		      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ///PZDC Sum
		      PZDCTotal=PZDCHADTotal;
		      ///NZDC Sum
		      NZDCTotal=NZDCHADTotal;
		      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ZDCTotal=PZDCTotal+NZDCTotal;
		      //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		      ///////////////////////////////////////////
		      ///////////Fill Histograms////////////////
		      /////////////////////////////////////////
		      if (Ndidsaturate==false)
			{
			  histogram_1->Fill(NZDCTotal);
			}
		      if (Pdidsaturate==false)
			{
			  histogram_2->Fill(PZDCTotal);
			}
		      /////////////////////////////////
		      //////////End Fill Histos///////
		      ///////////////////////////////
		    }//End of Event Loop
		  //////////////////////////////////
		  //////////Draw Histos//////////
		  //////////////////////////////
		  TCanvas c1;
		  histogram_1->SetXTitle("N-ZDC HAD Charge (fC)");
		  histogram_1->SetYTitle("Counts");
		  histogram_1->GetXaxis()->CenterTitle(1);
		  histogram_1->GetYaxis()->CenterTitle(1);
		  histogram_1->SetLineColor(2);
		  histogram_1->SetTitleOffset(1.13,"Y");
		  gStyle->SetPalette(1);
		  c1->SetLogy(1);
		  gStyle->SetOptStat("ne");
		  histogram_1->Draw();
		    
		  TCanvas c2;
		  histogram_2->SetXTitle("P-ZDC HAD Charge (fC)");
		  histogram_2->SetYTitle("Counts");
		  histogram_2->SetLineColor(4);
		  histogram_2->GetXaxis()->CenterTitle(1);
		  histogram_2->GetYaxis()->CenterTitle(1);
		  histogram_2->SetTitleOffset(1.13,"Y");
		  c2->SetLogy(1);
		  histogram_2->Draw();
		  ///////////////////////////////
		  /////////End of Draw Histos////
		  //////////////////////////////

		}//End of ADCVeto==True
	      /////////////////////////////////
	      ////////////////////////////////////
	      else { //Begin ADCVeto==False
		TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS","N-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
		TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC_NS","P-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		    NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		    NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		    NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		    PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		    PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		    PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		    PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		 		  
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCHADTotal=0.;
		    NZDCTotal=0.;
		    NZDCHADTotal=0.;
		  
		    ///Set All of the Signal/Noise Counters to 0 every event
		  
		    ///PZDC
		    PZDCHAD1TotalSignal=0.;
		    PZDCHAD1TotalNoise=0.;
		    PZDCHAD2TotalSignal=0.;
		    PZDCHAD2TotalNoise=0.;
		    PZDCHAD3TotalSignal=0.;
		    PZDCHAD3TotalNoise=0.;
		    PZDCHAD4TotalSignal=0.;
		    PZDCHAD4TotalNoise=0.;
		    ///NZDC
		    NZDCHAD1TotalSignal=0.;
		    NZDCHAD1TotalNoise=0.;
		    NZDCHAD2TotalSignal=0.;
		    NZDCHAD2TotalNoise=0.;
		    NZDCHAD3TotalSignal=0.;
		    NZDCHAD3TotalNoise=0.;
		    NZDCHAD4TotalSignal=0.;
		    NZDCHAD4TotalNoise=0.;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			  {
			    //PZDC Noise
			    PZDCHAD1TotalNoise+=PHAD1fC->GetValue(k);
			    PZDCHAD2TotalNoise+=PHAD2fC->GetValue(k);
			    PZDCHAD3TotalNoise+=PHAD3fC->GetValue(k);
			    PZDCHAD4TotalNoise+=PHAD4fC->GetValue(k);
			    //NZDC Noise
			    NZDCHAD1TotalNoise+=NHAD1fC->GetValue(k);
			    NZDCHAD2TotalNoise+=NHAD2fC->GetValue(k);
			    NZDCHAD3TotalNoise+=NHAD3fC->GetValue(k);
			    NZDCHAD4TotalNoise+=NHAD4fC->GetValue(k);
			  }//end of ZDC Noise statement
			else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    //PZDC Signal
			    PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
			    PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
			    PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
			    PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			    //NZDC Signal
			    NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
			    NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
			    NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
			    NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		  
		  
		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    ///PZDC-HAD
		    PZDCHADTotal=(PZDCHAD1TotalSignal-ratio*PZDCHAD1TotalNoise)+(PZDCHAD2TotalSignal-ratio*PZDCHAD2TotalNoise)+(PZDCHAD3TotalSignal-ratio*PZDCHAD3TotalNoise)+(PZDCHAD4TotalSignal-ratio*PZDCHAD4TotalNoise);
		    ///NZDC-HAD
		    NZDCHADTotal=(NZDCHAD1TotalSignal-ratio*NZDCHAD1TotalNoise)+(NZDCHAD2TotalSignal-ratio*NZDCHAD2TotalNoise)+(NZDCHAD3TotalSignal-ratio*NZDCHAD3TotalNoise)+(NZDCHAD4TotalSignal-ratio*NZDCHAD4TotalNoise); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCHADTotal;
		    ///NZDC Sum
		    NZDCTotal=NZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal+NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    histogram_1->Fill(NZDCTotal);
		    histogram_2->Fill(PZDCTotal);
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		TCanvas c1;
		histogram_1->SetXTitle("N-ZDC HAD Charge (fC)");
		histogram_1->SetYTitle("Counts");
		histogram_1->GetXaxis()->CenterTitle(1);
		histogram_1->GetYaxis()->CenterTitle(1);
		histogram_1->SetLineColor(2);
		histogram_1->SetTitleOffset(1.13,"Y");
		gStyle->SetPalette(1);
		c1->SetLogy(1);
		gStyle->SetOptStat("ne");
		histogram_1->Draw();
	      
		TCanvas c2;
		histogram_2->SetXTitle("P-ZDC HAD Charge (fC)");
		histogram_2->SetYTitle("Counts");
		histogram_2->SetLineColor(4);
		histogram_2->GetXaxis()->CenterTitle(1);
		histogram_2->GetYaxis()->CenterTitle(1);
		histogram_2->SetTitleOffset(1.13,"Y");
		c2->SetLogy(1);
		histogram_2->Draw();
		///////////////////////////////
		/////////End of Draw Histos////
		//////////////////////////////
	      
	      }//End of ADCVeto==False
	      /////////////////////////////////
	      ////////////////////////////////////

	    }//End of NoiseSubtract==True
	  ////////////////////////////////
	  ///////////////////////////////

	  ////////////////////////////////////
	  ///////////////////////////////////
	  else { //Begin NoiseSubtract==False
	    if (ADCVeto==1)
	      {
		int phad1adc;
		int phad2adc;
		int phad3adc;
		int phad4adc;
		int nhad1adc;
		int nhad2adc;
		int nhad3adc;
		int nhad4adc;
		bool Pdidsaturate;
		bool Ndidsaturate;

		TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_ADCVeto","N-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC_ADCVeto","P-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		    NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		    NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		    NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		    PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		    PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		    PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		    PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		   		    
		    ////ADCCounters
		    NHAD1ADC= (TLeaf*)chain->GetLeaf("negHD1ADCtsz");//NHAD1
		    NHAD2ADC= (TLeaf*)chain->GetLeaf("negHD2ADCtsz");//NHAD2
		    NHAD3ADC= (TLeaf*)chain->GetLeaf("negHD3ADCtsz");//NHAD3
		    NHAD4ADC= (TLeaf*)chain->GetLeaf("negHD4ADCtsz");//NHAD4
		    PHAD1ADC= (TLeaf*)chain->GetLeaf("posHD1ADCtsz");//PHAD1
		    PHAD2ADC= (TLeaf*)chain->GetLeaf("posHD2ADCtsz");//PHAD2
		    PHAD3ADC= (TLeaf*)chain->GetLeaf("posHD3ADCtsz");//PHAD3
		    PHAD4ADC= (TLeaf*)chain->GetLeaf("posHD4ADCtsz");//PHAD4
		   		    
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCHADTotal=0.;
		    NZDCTotal=0.;
		    NZDCHADTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///PZDC
		    PZDCHAD1TotalSignal=0.;
		    PZDCHAD2TotalSignal=0.;
		    PZDCHAD3TotalSignal=0.;
		    PZDCHAD4TotalSignal=0.;
		    ///NZDC
		    NZDCHAD1TotalSignal=0.;
		    NZDCHAD2TotalSignal=0.;
		    NZDCHAD3TotalSignal=0.;
		    NZDCHAD4TotalSignal=0.;
		    //ADCCRAP
		    phad1adc=0;
		    phad2adc=0;
		    phad3adc=0;
		    phad4adc=0;
		    nhad1adc=0;
		    nhad2adc=0;
		    nhad3adc=0;
		    nhad4adc=0;
		    Pdidsaturate=false;
		    Ndidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    phad1adc=PHAD1ADC->GetValue(k);
			    //	    std::cout<<phad1adc<<std::endl;
			    phad2adc=PHAD2ADC->GetValue(k);
			    phad3adc=PHAD3ADC->GetValue(k);
			    phad4adc=PHAD4ADC->GetValue(k);
			    nhad1adc=NHAD1ADC->GetValue(k);
			    nhad2adc=NHAD2ADC->GetValue(k);
			    nhad3adc=NHAD3ADC->GetValue(k);
			    nhad4adc=NHAD4ADC->GetValue(k);
			    //PZDC Signal
			    if ((phad1adc!=127) && (phad2adc!=127) && (phad3adc!=127) && (phad4adc!=127))
			      {
				PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
				PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
				PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
				PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			      }
			    else {
			      Pdidsaturate=true;
			    }
			    //NZDC Signal
			    if ((nhad1adc!=127) && (nhad2adc!=127) && (nhad3adc!=127) &&  (nhad4adc!=127))
			      {
				NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
				NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
				NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
				NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			      }
			    else {
			      Ndidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    
		    
		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    ///PZDC-HAD
		    PZDCHADTotal=(PZDCHAD1TotalSignal)+(PZDCHAD2TotalSignal)+(PZDCHAD3TotalSignal)+(PZDCHAD4TotalSignal);
		    ///NZDC-HAD
		    NZDCHADTotal=(NZDCHAD1TotalSignal)+(NZDCHAD2TotalSignal)+(NZDCHAD3TotalSignal)+(NZDCHAD4TotalSignal); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCHADTotal;
		    ///NZDC Sum
		    NZDCTotal=NZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal+NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Ndidsaturate==false)
		      {
			histogram_1->Fill(NZDCTotal);
		      }
		    if (Pdidsaturate==false)
		      {
			histogram_2->Fill(PZDCTotal);
		      }
      		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		TCanvas c1;
		histogram_1->SetXTitle("N-ZDC HAD Charge (fC)");
		histogram_1->SetYTitle("Counts");
		histogram_1->GetXaxis()->CenterTitle(1);
		histogram_1->GetYaxis()->CenterTitle(1);
		histogram_1->SetLineColor(2);
		histogram_1->SetTitleOffset(1.13,"Y");
		gStyle->SetPalette(1);
		c1->SetLogy(1);
		gStyle->SetOptStat("ne");
		histogram_1->Draw();
		    
		TCanvas c2;
		histogram_2->SetXTitle("P-ZDC HAD Charge (fC)");
		histogram_2->SetYTitle("Counts");
		histogram_2->SetLineColor(4);
		histogram_2->GetXaxis()->CenterTitle(1);
		histogram_2->GetYaxis()->CenterTitle(1);
		histogram_2->SetTitleOffset(1.13,"Y");
		c2->SetLogy(1);
		histogram_2->Draw();
		///////////////////////////////
		/////////End of Draw Histos////
		//////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC","N-ZDC_1D_fC", 200, 0.0, 10000.0);
	      TH1F* histogram_2 = new TH1F("P-ZDC_1D_fC","P-ZDC_1D_fC", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		  NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		  NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		  NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		  PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		  PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		  PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		  PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		 		  
		  ZDCTotal=0.;
		  PZDCTotal=0.;
		  PZDCHADTotal=0.;
		  NZDCTotal=0.;
		  NZDCHADTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///PZDC
		  PZDCHAD1TotalSignal=0.;
		  PZDCHAD2TotalSignal=0.;
		  PZDCHAD3TotalSignal=0.;
		  PZDCHAD4TotalSignal=0.;
		  ///NZDC
		  NZDCHAD1TotalSignal=0.;
		  NZDCHAD2TotalSignal=0.;
		  NZDCHAD3TotalSignal=0.;
		  NZDCHAD4TotalSignal=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //PZDC Signal
			  PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
			  PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
			  PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
			  PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			  //NZDC Signal
			  NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
			  NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
			  NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
			  NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  ///PZDC-HAD
		  PZDCHADTotal=(PZDCHAD1TotalSignal)+(PZDCHAD2TotalSignal)+(PZDCHAD3TotalSignal)+(PZDCHAD4TotalSignal);
		  ///NZDC-HAD
		  NZDCHADTotal=(NZDCHAD1TotalSignal)+(NZDCHAD2TotalSignal)+(NZDCHAD3TotalSignal)+(NZDCHAD4TotalSignal); 
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///PZDC Sum
		  PZDCTotal=PZDCHADTotal;
		  ///NZDC Sum
		  NZDCTotal=NZDCHADTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=PZDCTotal+NZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(NZDCTotal);
		  histogram_2->Fill(PZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop

	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("N-ZDC HAD Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      
	      TCanvas c2;
	      histogram_2->SetXTitle("P-ZDC HAD Charge (fC)");
	      histogram_2->SetYTitle("Counts");
	      histogram_2->SetLineColor(4);
	      histogram_2->GetXaxis()->CenterTitle(1);
	      histogram_2->GetYaxis()->CenterTitle(1);
	      histogram_2->SetTitleOffset(1.13,"Y");
	      c2->SetLogy(1);
	      histogram_2->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	}//End of NoiseSubtract==False
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////
	/////////////////////////////////
      }//End of HAD Only
    ////////////////////////////////////
    ///////////////////////////////////   
    }//End of PZDC&NZDC==True
  ///////////////////////////////
  ///////////////////////////////
  /////////////////////////////
  ////////////////////////////


else if(PZDC==0 && NZDC==1)
   {//Begin NZDC only

    if (EM==1 && HAD==1)
      {
	///NZDC
	double NZDCEM1TotalSignal;
	double NZDCEM2TotalSignal;
	double NZDCEM3TotalSignal;
	double NZDCEM4TotalSignal;
	double NZDCEM5TotalSignal;
	double NZDCHAD1TotalSignal;
	double NZDCHAD2TotalSignal;
	double NZDCHAD3TotalSignal;
	double NZDCHAD4TotalSignal;
	if (NoiseSubtract==true)
	  {
	    ///NZDC
	    double NZDCEM1TotalNoise;
	    double NZDCEM2TotalNoise;
	    double NZDCEM3TotalNoise;
	    double NZDCEM4TotalNoise;
	    double NZDCEM5TotalNoise;
	    double NZDCHAD1TotalNoise;
	    double NZDCHAD2TotalNoise;
	    double NZDCHAD3TotalNoise;
	    double NZDCHAD4TotalNoise;
	    if (ADCVeto==1)
	      {
		int nem1adc;
		int nem2adc;
		int nem3adc;
		int nem4adc;
		int nem5adc;
		int nhad1adc;
		int nhad2adc;
		int nhad3adc;
		int nhad4adc;
		bool Ndidsaturate;
		
		TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS_ADCVeto","N-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		    NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		    NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		    NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		    NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		    NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		    NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		    NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		    NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		   
		    ////ADCCounters
		    NHAD1ADC= (TLeaf*)chain->GetLeaf("negHD1ADCtsz");//NHAD1
		    NHAD2ADC= (TLeaf*)chain->GetLeaf("negHD2ADCtsz");//NHAD2
		    NHAD3ADC= (TLeaf*)chain->GetLeaf("negHD3ADCtsz");//NHAD3
		    NHAD4ADC= (TLeaf*)chain->GetLeaf("negHD4ADCtsz");//NHAD4
		    NEM1ADC= (TLeaf*)chain->GetLeaf("negEM1ADCtsz");//NEM1
		    NEM2ADC= (TLeaf*)chain->GetLeaf("negEM2ADCtsz");//NEM2
		    NEM3ADC= (TLeaf*)chain->GetLeaf("negEM3ADCtsz");//NEM3
		    NEM4ADC= (TLeaf*)chain->GetLeaf("negEM4ADCtsz");//NEM4
		    NEM5ADC= (TLeaf*)chain->GetLeaf("negEM5ADCtsz");//NEM5

		    
		    ZDCTotal=0.;
		    NZDCTotal=0.;
		    NZDCEMTotal=0.;
		    NZDCHADTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    

		    ///NZDC
		    NZDCEM1TotalSignal=0.;
		    NZDCEM1TotalNoise=0.;
		    NZDCEM2TotalSignal=0.;
		    NZDCEM2TotalNoise=0.;
		    NZDCEM3TotalSignal=0.;
		    NZDCEM3TotalNoise=0.;
		    NZDCEM4TotalSignal=0.;
		    NZDCEM4TotalNoise=0.;
		    NZDCEM5TotalSignal=0.;
		    NZDCEM5TotalNoise=0.;
		    NZDCHAD1TotalSignal=0.;
		    NZDCHAD1TotalNoise=0.;
		    NZDCHAD2TotalSignal=0.;
		    NZDCHAD2TotalNoise=0.;
		    NZDCHAD3TotalSignal=0.;
		    NZDCHAD3TotalNoise=0.;
		    NZDCHAD4TotalSignal=0.;
		    NZDCHAD4TotalNoise=0.;
		    //ADCCRAP
		    nem1adc=0;
		    nem2adc=0;
		    nem3adc=0;
		    nem4adc=0;
		    nem5adc=0;
		    nhad1adc=0;
		    nhad2adc=0;
		    nhad3adc=0;
		    nhad4adc=0;
		    Ndidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			  {
			    //NZDC Noise
			    NZDCEM1TotalNoise+=NEM1fC->GetValue(k);
			    NZDCEM2TotalNoise+=NEM2fC->GetValue(k);
			    NZDCEM3TotalNoise+=NEM3fC->GetValue(k);
			    NZDCEM4TotalNoise+=NEM4fC->GetValue(k);
			    NZDCEM5TotalNoise+=NEM5fC->GetValue(k);
			    NZDCHAD1TotalNoise+=NHAD1fC->GetValue(k);
			    NZDCHAD2TotalNoise+=NHAD2fC->GetValue(k);
			    NZDCHAD3TotalNoise+=NHAD3fC->GetValue(k);
			    NZDCHAD4TotalNoise+=NHAD4fC->GetValue(k);
			  }//end of ZDC Noise statement
			else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    nem1adc=NEM1ADC->GetValue(k);
			    nem2adc=NEM2ADC->GetValue(k);
			    nem3adc=NEM3ADC->GetValue(k);
			    nem4adc=NEM4ADC->GetValue(k);
			    nem5adc=NEM5ADC->GetValue(k);
			    nhad1adc=NHAD1ADC->GetValue(k);
			    nhad2adc=NHAD2ADC->GetValue(k);
			    nhad3adc=NHAD3ADC->GetValue(k);
			    nhad4adc=NHAD4ADC->GetValue(k);
			    //NZDC Signal
			    if ((nem1adc!=127) && (nem2adc!=127) && (nem3adc!=127) && (nem4adc!=127) && (nem5adc!=127) && (nhad1adc!=127) && (nhad2adc!=127) && (nhad3adc!=127) &&  (nhad4adc!=127))
			      {
				NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
				NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
				NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
				NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
				NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
				NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
				NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
				NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
				NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			      }
			    else {
			      Ndidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //NZDC-EM
		    NZDCEMTotal=(NZDCEM1TotalSignal-ratio*NZDCEM1TotalNoise)+(NZDCEM2TotalSignal-ratio*NZDCEM2TotalNoise)+(NZDCEM3TotalSignal-ratio*NZDCEM3TotalNoise)+(NZDCEM4TotalSignal-ratio*NZDCEM4TotalNoise)+(NZDCEM5TotalSignal-ratio*NZDCEM5TotalNoise);
		    ///NZDC-HAD
		    NZDCHADTotal=(NZDCHAD1TotalSignal-ratio*NZDCHAD1TotalNoise)+(NZDCHAD2TotalSignal-ratio*NZDCHAD2TotalNoise)+(NZDCHAD3TotalSignal-ratio*NZDCHAD3TotalNoise)+(NZDCHAD4TotalSignal-ratio*NZDCHAD4TotalNoise); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///NZDC Sum
		    NZDCTotal=NZDCEMTotal+NZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Ndidsaturate==false)
		      {
			histogram_1->Fill(NZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("N-ZDC Total Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS","N-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		  NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		  NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		  NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		  NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		  NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		  NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		  NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		  NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5

		  
		  ZDCTotal=0.;
		  NZDCTotal=0.;
		  NZDCEMTotal=0.;
		  NZDCHADTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///NZDC
		  NZDCEM1TotalSignal=0.;
		  NZDCEM1TotalNoise=0.;
		  NZDCEM2TotalSignal=0.;
		  NZDCEM2TotalNoise=0.;
		  NZDCEM3TotalSignal=0.;
		  NZDCEM3TotalNoise=0.;
		  NZDCEM4TotalSignal=0.;
		  NZDCEM4TotalNoise=0.;
		  NZDCEM5TotalSignal=0.;
		  NZDCEM5TotalNoise=0.;
		  NZDCHAD1TotalSignal=0.;
		  NZDCHAD1TotalNoise=0.;
		  NZDCHAD2TotalSignal=0.;
		  NZDCHAD2TotalNoise=0.;
		  NZDCHAD3TotalSignal=0.;
		  NZDCHAD3TotalNoise=0.;
		  NZDCHAD4TotalSignal=0.;
		  NZDCHAD4TotalNoise=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			{
			  //NZDC Noise
			  NZDCEM1TotalNoise+=NEM1fC->GetValue(k);
			  NZDCEM2TotalNoise+=NEM2fC->GetValue(k);
			  NZDCEM3TotalNoise+=NEM3fC->GetValue(k);
			  NZDCEM4TotalNoise+=NEM4fC->GetValue(k);
			  NZDCEM5TotalNoise+=NEM5fC->GetValue(k);
			  NZDCHAD1TotalNoise+=NHAD1fC->GetValue(k);
			  NZDCHAD2TotalNoise+=NHAD2fC->GetValue(k);
			  NZDCHAD3TotalNoise+=NHAD3fC->GetValue(k);
			  NZDCHAD4TotalNoise+=NHAD4fC->GetValue(k);
			}//end of ZDC Noise statement
		      else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //NZDC Signal
			  NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
			  NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
			  NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
			  NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
			  NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			  NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
			  NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
			  NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
			  NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  //NZDC-EM
		  NZDCEMTotal=(NZDCEM1TotalSignal-ratio*NZDCEM1TotalNoise)+(NZDCEM2TotalSignal-ratio*NZDCEM2TotalNoise)+(NZDCEM3TotalSignal-ratio*NZDCEM3TotalNoise)+(NZDCEM4TotalSignal-ratio*NZDCEM4TotalNoise)+(NZDCEM5TotalSignal-ratio*NZDCEM5TotalNoise);
		  ///NZDC-HAD
		  NZDCHADTotal=(NZDCHAD1TotalSignal-ratio*NZDCHAD1TotalNoise)+(NZDCHAD2TotalSignal-ratio*NZDCHAD2TotalNoise)+(NZDCHAD3TotalSignal-ratio*NZDCHAD3TotalNoise)+(NZDCHAD4TotalSignal-ratio*NZDCHAD4TotalNoise); 
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                 ///NZDC Sum
		  NZDCTotal=NZDCEMTotal+NZDCHADTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=NZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(NZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("N-ZDC Total Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==True
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////////
	///////////////////////////////////
	else { //Begin NoiseSubtract==False
	  if (ADCVeto==1)
	    {
	      int nem1adc;
	      int nem2adc;
	      int nem3adc;
	      int nem4adc;
	      int nem5adc;
	      int nhad1adc;
	      int nhad2adc;
	      int nhad3adc;
	      int nhad4adc;
	      bool Ndidsaturate;
		
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_ADCVeto","N-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		    NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		    NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		    NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		    NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		    NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		    NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		    NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		    NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		    
		    ////ADCCounters
		    NHAD1ADC= (TLeaf*)chain->GetLeaf("negHD1ADCtsz");//NHAD1
		    NHAD2ADC= (TLeaf*)chain->GetLeaf("negHD2ADCtsz");//NHAD2
		    NHAD3ADC= (TLeaf*)chain->GetLeaf("negHD3ADCtsz");//NHAD3
		    NHAD4ADC= (TLeaf*)chain->GetLeaf("negHD4ADCtsz");//NHAD4
		    NEM1ADC= (TLeaf*)chain->GetLeaf("negEM1ADCtsz");//NEM1
		    NEM2ADC= (TLeaf*)chain->GetLeaf("negEM2ADCtsz");//NEM2
		    NEM3ADC= (TLeaf*)chain->GetLeaf("negEM3ADCtsz");//NEM3
		    NEM4ADC= (TLeaf*)chain->GetLeaf("negEM4ADCtsz");//NEM4
		    NEM5ADC= (TLeaf*)chain->GetLeaf("negEM5ADCtsz");//NEM5
		    
		    ZDCTotal=0.;
		    NZDCTotal=0.;
		    NZDCEMTotal=0.;
		    NZDCHADTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///NZDC
		    NZDCEM1TotalSignal=0.;
		    NZDCEM2TotalSignal=0.;
		    NZDCEM3TotalSignal=0.;
		    NZDCEM4TotalSignal=0.;
		    NZDCEM5TotalSignal=0.;
		    NZDCHAD1TotalSignal=0.;
		    NZDCHAD2TotalSignal=0.;
		    NZDCHAD3TotalSignal=0.;
		    NZDCHAD4TotalSignal=0.;
		    //ADCCRAP

		    nem1adc=0;
		    nem2adc=0;
		    nem3adc=0;
		    nem4adc=0;
		    nem5adc=0;
		    nhad1adc=0;
		    nhad2adc=0;
		    nhad3adc=0;
		    nhad4adc=0;
		    Ndidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    nem1adc=NEM1ADC->GetValue(k);
			    nem2adc=NEM2ADC->GetValue(k);
			    nem3adc=NEM3ADC->GetValue(k);
			    nem4adc=NEM4ADC->GetValue(k);
			    nem5adc=NEM5ADC->GetValue(k);
			    nhad1adc=NHAD1ADC->GetValue(k);
			    nhad2adc=NHAD2ADC->GetValue(k);
			    nhad3adc=NHAD3ADC->GetValue(k);
			    nhad4adc=NHAD4ADC->GetValue(k);
                           //NZDC Signal
			    if ((nem1adc!=127) && (nem2adc!=127) && (nem3adc!=127) && (nem4adc!=127) && (nem5adc!=127) && (nhad1adc!=127) && (nhad2adc!=127) && (nhad3adc!=127) &&  (nhad4adc!=127))
			      {
				NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
				NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
				NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
				NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
				NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
				NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
				NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
				NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
				NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			      }
			    else {
			      Ndidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //NZDC-EM
		    NZDCEMTotal=(NZDCEM1TotalSignal)+(NZDCEM2TotalSignal)+(NZDCEM3TotalSignal)+(NZDCEM4TotalSignal)+(NZDCEM5TotalSignal);
		    ///NZDC-HAD
		    NZDCHADTotal=(NZDCHAD1TotalSignal)+(NZDCHAD2TotalSignal)+(NZDCHAD3TotalSignal)+(NZDCHAD4TotalSignal); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///NZDC Sum
		    NZDCTotal=NZDCEMTotal+NZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Ndidsaturate==false)
		      {
			histogram_1->Fill(NZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("N-ZDC Total Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    
		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC","N-ZDC_1D_fC", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		  NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		  NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		  NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		  NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		  NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		  NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		  NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		  NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		  
		  ZDCTotal=0.;
		  NZDCTotal=0.;
		  NZDCEMTotal=0.;
		  NZDCHADTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///NZDC
		  NZDCEM1TotalSignal=0.;
		  NZDCEM2TotalSignal=0.;
		  NZDCEM3TotalSignal=0.;
		  NZDCEM4TotalSignal=0.;
		  NZDCEM5TotalSignal=0.;
		  NZDCHAD1TotalSignal=0.;
		  NZDCHAD2TotalSignal=0.;
		  NZDCHAD3TotalSignal=0.;
		  NZDCHAD4TotalSignal=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //NZDC Signal
			  NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
			  NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
			  NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
			  NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
			  NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			  NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
			  NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
			  NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
			  NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  //NZDC-EM
		  NZDCEMTotal=(NZDCEM1TotalSignal)+(NZDCEM2TotalSignal)+(NZDCEM3TotalSignal)+(NZDCEM4TotalSignal)+(NZDCEM5TotalSignal);
		  ///NZDC-HAD
		  NZDCHADTotal=(NZDCHAD1TotalSignal)+(NZDCHAD2TotalSignal)+(NZDCHAD3TotalSignal)+(NZDCHAD4TotalSignal); 
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///NZDC Sum
		  NZDCTotal=NZDCEMTotal+NZDCHADTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=NZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(NZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("N-ZDC Total Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==False
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////
	/////////////////////////////////
      }//End of EM&HAD==True
    

    ////////////////////////////////
    //////////////////////////////
    else if (EM==1 && HAD==0)
      {////Begin EM ONLY
	///NZDC
	double NZDCEM1TotalSignal;
	double NZDCEM2TotalSignal;
	double NZDCEM3TotalSignal;
	double NZDCEM4TotalSignal;
	double NZDCEM5TotalSignal;
	if (NoiseSubtract==true)
	  {
	    ///NZDC
	    double NZDCEM1TotalNoise;
	    double NZDCEM2TotalNoise;
	    double NZDCEM3TotalNoise;
	    double NZDCEM4TotalNoise;
	    double NZDCEM5TotalNoise;
	    if (ADCVeto==1)
	      {
		int nem1adc;
		int nem2adc;
		int nem3adc;
		int nem4adc;
		int nem5adc;
		bool Ndidsaturate;
		
		TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS_ADCVeto","N-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		    NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		    NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		    NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		    NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		    
		    ////ADCCounters
		    NEM1ADC= (TLeaf*)chain->GetLeaf("negEM1ADCtsz");//NEM1
		    NEM2ADC= (TLeaf*)chain->GetLeaf("negEM2ADCtsz");//NEM2
		    NEM3ADC= (TLeaf*)chain->GetLeaf("negEM3ADCtsz");//NEM3
		    NEM4ADC= (TLeaf*)chain->GetLeaf("negEM4ADCtsz");//NEM4
		    NEM5ADC= (TLeaf*)chain->GetLeaf("negEM5ADCtsz");//NEM5
		    
		    ZDCTotal=0.;
		    NZDCTotal=0.;
		    NZDCEMTotal=0.;
		    		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///NZDC
		    NZDCEM1TotalSignal=0.;
		    NZDCEM1TotalNoise=0.;
		    NZDCEM2TotalSignal=0.;
		    NZDCEM2TotalNoise=0.;
		    NZDCEM3TotalSignal=0.;
		    NZDCEM3TotalNoise=0.;
		    NZDCEM4TotalSignal=0.;
		    NZDCEM4TotalNoise=0.;
		    NZDCEM5TotalSignal=0.;
		    NZDCEM5TotalNoise=0.;
		    //ADCCRAP
		    nem1adc=0;
		    nem2adc=0;
		    nem3adc=0;
		    nem4adc=0;
		    nem5adc=0;
		    Ndidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			  {
			    //NZDC Noise
			    NZDCEM1TotalNoise+=NEM1fC->GetValue(k);
			    NZDCEM2TotalNoise+=NEM2fC->GetValue(k);
			    NZDCEM3TotalNoise+=NEM3fC->GetValue(k);
			    NZDCEM4TotalNoise+=NEM4fC->GetValue(k);
			    NZDCEM5TotalNoise+=NEM5fC->GetValue(k);
			  }//end of ZDC Noise statement
			else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    nem1adc=NEM1ADC->GetValue(k);
			    nem2adc=NEM2ADC->GetValue(k);
			    nem3adc=NEM3ADC->GetValue(k);
			    nem4adc=NEM4ADC->GetValue(k);
			    nem5adc=NEM5ADC->GetValue(k);
			    //NZDC Signal
			    if ((nem1adc!=127) && (nem2adc!=127) && (nem3adc!=127) && (nem4adc!=127) && (nem5adc!=127))
			      {
				NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
				NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
				NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
				NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
				NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			      }
			    else {
			      Ndidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //NZDC-EM
		    NZDCEMTotal=(NZDCEM1TotalSignal-ratio*NZDCEM1TotalNoise)+(NZDCEM2TotalSignal-ratio*NZDCEM2TotalNoise)+(NZDCEM3TotalSignal-ratio*NZDCEM3TotalNoise)+(NZDCEM4TotalSignal-ratio*NZDCEM4TotalNoise)+(NZDCEM5TotalSignal-ratio*NZDCEM5TotalNoise);
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///NZDC Sum
		    NZDCTotal=NZDCEMTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Ndidsaturate==false)
		      {
			histogram_1->Fill(NZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("N-ZDC EM Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS","N-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		  NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		  NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		  NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		  NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		  
		  ZDCTotal=0.;
		  NZDCTotal=0.;
		  NZDCEMTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  ///NZDC
		  NZDCEM1TotalSignal=0.;
		  NZDCEM1TotalNoise=0.;
		  NZDCEM2TotalSignal=0.;
		  NZDCEM2TotalNoise=0.;
		  NZDCEM3TotalSignal=0.;
		  NZDCEM3TotalNoise=0.;
		  NZDCEM4TotalSignal=0.;
		  NZDCEM4TotalNoise=0.;
		  NZDCEM5TotalSignal=0.;
		  NZDCEM5TotalNoise=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			{
			  //NZDC Noise
			  NZDCEM1TotalNoise+=NEM1fC->GetValue(k);
			  NZDCEM2TotalNoise+=NEM2fC->GetValue(k);
			  NZDCEM3TotalNoise+=NEM3fC->GetValue(k);
			  NZDCEM4TotalNoise+=NEM4fC->GetValue(k);
			  NZDCEM5TotalNoise+=NEM5fC->GetValue(k);
			}//end of ZDC Noise statement
		      else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //NZDC Signal
			  NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
			  NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
			  NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
			  NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
			  NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  //NZDC-EM
		  NZDCEMTotal=(NZDCEM1TotalSignal-ratio*NZDCEM1TotalNoise)+(NZDCEM2TotalSignal-ratio*NZDCEM2TotalNoise)+(NZDCEM3TotalSignal-ratio*NZDCEM3TotalNoise)+(NZDCEM4TotalSignal-ratio*NZDCEM4TotalNoise)+(NZDCEM5TotalSignal-ratio*NZDCEM5TotalNoise);
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///NZDC Sum
		  NZDCTotal=NZDCEMTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=NZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(NZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("N-ZDC EM Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==True
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////////
	///////////////////////////////////
	else { //Begin NoiseSubtract==False
	  if (ADCVeto==1)
	    {
	      int nem1adc;
	      int nem2adc;
	      int nem3adc;
	      int nem4adc;
	      int nem5adc;
	      bool Ndidsaturate;
		
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_ADCVeto","N-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		    NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		    NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		    NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		    NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5
		    
		    ////ADCCounters
		    NEM1ADC= (TLeaf*)chain->GetLeaf("negEM1ADCtsz");//NEM1
		    NEM2ADC= (TLeaf*)chain->GetLeaf("negEM2ADCtsz");//NEM2
		    NEM3ADC= (TLeaf*)chain->GetLeaf("negEM3ADCtsz");//NEM3
		    NEM4ADC= (TLeaf*)chain->GetLeaf("negEM4ADCtsz");//NEM4
		    NEM5ADC= (TLeaf*)chain->GetLeaf("negEM5ADCtsz");//NEM5
		    
		    ZDCTotal=0.;
		    NZDCTotal=0.;
		    NZDCEMTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///NZDC
		    NZDCEM1TotalSignal=0.;
		    NZDCEM2TotalSignal=0.;
		    NZDCEM3TotalSignal=0.;
		    NZDCEM4TotalSignal=0.;
		    NZDCEM5TotalSignal=0.;
		    //ADCCRAP
		    nem1adc=0;
		    nem2adc=0;
		    nem3adc=0;
		    nem4adc=0;
		    nem5adc=0;
		    Ndidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    nem1adc=NEM1ADC->GetValue(k);
			    nem2adc=NEM2ADC->GetValue(k);
			    nem3adc=NEM3ADC->GetValue(k);
			    nem4adc=NEM4ADC->GetValue(k);
			    nem5adc=NEM5ADC->GetValue(k);
			    //NZDC Signal
			    if ((nem1adc!=127) && (nem2adc!=127) && (nem3adc!=127) && (nem4adc!=127) && (nem5adc!=127))
			      {
				NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
				NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
				NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
				NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
				NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			      }
			    else {
			      Ndidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //NZDC-EM
		    NZDCEMTotal=(NZDCEM1TotalSignal)+(NZDCEM2TotalSignal)+(NZDCEM3TotalSignal)+(NZDCEM4TotalSignal)+(NZDCEM5TotalSignal);
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///NZDC Sum
		    NZDCTotal=NZDCEMTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Ndidsaturate==false)
		      {
			histogram_1->Fill(NZDCTotal);
		      }
			////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("N-ZDC EM Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    

		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC","N-ZDC_1D_fC", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  NEM1fC= (TLeaf*)chain->GetLeaf("negEM1cFtsz");//NEM1
		  NEM2fC= (TLeaf*)chain->GetLeaf("negEM2cFtsz");//NEM2
		  NEM3fC= (TLeaf*)chain->GetLeaf("negEM3cFtsz");//NEM3
		  NEM4fC= (TLeaf*)chain->GetLeaf("negEM4cFtsz");//NEM4
		  NEM5fC= (TLeaf*)chain->GetLeaf("negEM5cFtsz");//NEM5

		  
		  ZDCTotal=0.;
		  NZDCTotal=0.;
		  NZDCEMTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///NZDC
		  NZDCEM1TotalSignal=0.;
		  NZDCEM2TotalSignal=0.;
		  NZDCEM3TotalSignal=0.;
		  NZDCEM4TotalSignal=0.;
		  NZDCEM5TotalSignal=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //NZDC Signal
			  NZDCEM1TotalSignal+=NEM1fC->GetValue(k);
			  NZDCEM2TotalSignal+=NEM2fC->GetValue(k);
			  NZDCEM3TotalSignal+=NEM3fC->GetValue(k);
			  NZDCEM4TotalSignal+=NEM4fC->GetValue(k);
			  NZDCEM5TotalSignal+=NEM5fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  //NZDC-EM
		  NZDCEMTotal=(NZDCEM1TotalSignal)+(NZDCEM2TotalSignal)+(NZDCEM3TotalSignal)+(NZDCEM4TotalSignal)+(NZDCEM5TotalSignal);
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///NZDC Sum
		  NZDCTotal=NZDCEMTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=NZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(NZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("N-ZDC EM Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==False
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////
	/////////////////////////////////
      }//End of EM ONLY
    //////////////////////////////////////
    /////////////////////////////////////

    ////////////////////////////
    /////////////////////////////
    else if(EM==0 && HAD==1)
      {//Begin HAD Only
	///NZDC
	double NZDCHAD1TotalSignal;
	double NZDCHAD2TotalSignal;
	double NZDCHAD3TotalSignal;
	double NZDCHAD4TotalSignal;
	if (NoiseSubtract==true)
	  {
	    ///NZDC
	    double NZDCHAD1TotalNoise;
	    double NZDCHAD2TotalNoise;
	    double NZDCHAD3TotalNoise;
	    double NZDCHAD4TotalNoise;
	    if (ADCVeto==1)
	      {
		int nhad1adc;
		int nhad2adc;
		int nhad3adc;
		int nhad4adc;
		bool Ndidsaturate;
		
		TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS_ADCVeto","N-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		    NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		    NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		    NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		    		    
		    ////ADCCounters
		    NHAD1ADC= (TLeaf*)chain->GetLeaf("negHD1ADCtsz");//NHAD1
		    NHAD2ADC= (TLeaf*)chain->GetLeaf("negHD2ADCtsz");//NHAD2
		    NHAD3ADC= (TLeaf*)chain->GetLeaf("negHD3ADCtsz");//NHAD3
		    NHAD4ADC= (TLeaf*)chain->GetLeaf("negHD4ADCtsz");//NHAD4
		    
		    ZDCTotal=0.;
		    NZDCTotal=0.;
		    NZDCHADTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///NZDC
		    NZDCHAD1TotalSignal=0.;
		    NZDCHAD1TotalNoise=0.;
		    NZDCHAD2TotalSignal=0.;
		    NZDCHAD2TotalNoise=0.;
		    NZDCHAD3TotalSignal=0.;
		    NZDCHAD3TotalNoise=0.;
		    NZDCHAD4TotalSignal=0.;
		    NZDCHAD4TotalNoise=0.;
		    //ADCCRAP
		    nhad1adc=0;
		    nhad2adc=0;
		    nhad3adc=0;
		    nhad4adc=0;
		    Ndidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			  {
			    //NZDC Noise
			    NZDCHAD1TotalNoise+=NHAD1fC->GetValue(k);
			    NZDCHAD2TotalNoise+=NHAD2fC->GetValue(k);
			    NZDCHAD3TotalNoise+=NHAD3fC->GetValue(k);
			    NZDCHAD4TotalNoise+=NHAD4fC->GetValue(k);
			  }//end of ZDC Noise statement
			else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    nhad1adc=NHAD1ADC->GetValue(k);
			    nhad2adc=NHAD2ADC->GetValue(k);
			    nhad3adc=NHAD3ADC->GetValue(k);
			    nhad4adc=NHAD4ADC->GetValue(k);
			    //NZDC Signal
			    if ((nhad1adc!=127) && (nhad2adc!=127) && (nhad3adc!=127) &&  (nhad4adc!=127))
			      {
				NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
				NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
				NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
				NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			      }
			    else {
			      Ndidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    ///NZDC-HAD
		    NZDCHADTotal=(NZDCHAD1TotalSignal-ratio*NZDCHAD1TotalNoise)+(NZDCHAD2TotalSignal-ratio*NZDCHAD2TotalNoise)+(NZDCHAD3TotalSignal-ratio*NZDCHAD3TotalNoise)+(NZDCHAD4TotalSignal-ratio*NZDCHAD4TotalNoise); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///NZDC Sum
		    NZDCTotal=NZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Ndidsaturate==false)
		      {
			histogram_1->Fill(NZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("N-ZDC HAD Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_NS","N-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		  NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		  NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		  NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		 		  
		  ZDCTotal=0.;
		  NZDCTotal=0.;
		  NZDCHADTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///NZDC
		  NZDCHAD1TotalSignal=0.;
		  NZDCHAD1TotalNoise=0.;
		  NZDCHAD2TotalSignal=0.;
		  NZDCHAD2TotalNoise=0.;
		  NZDCHAD3TotalSignal=0.;
		  NZDCHAD3TotalNoise=0.;
		  NZDCHAD4TotalSignal=0.;
		  NZDCHAD4TotalNoise=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			{
			  //NZDC Noise
			  NZDCHAD1TotalNoise+=NHAD1fC->GetValue(k);
			  NZDCHAD2TotalNoise+=NHAD2fC->GetValue(k);
			  NZDCHAD3TotalNoise+=NHAD3fC->GetValue(k);
			  NZDCHAD4TotalNoise+=NHAD4fC->GetValue(k);
			}//end of ZDC Noise statement
		      else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //NZDC Signal
			  NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
			  NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
			  NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
			  NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  ///NZDC-HAD
		  NZDCHADTotal=(NZDCHAD1TotalSignal-ratio*NZDCHAD1TotalNoise)+(NZDCHAD2TotalSignal-ratio*NZDCHAD2TotalNoise)+(NZDCHAD3TotalSignal-ratio*NZDCHAD3TotalNoise)+(NZDCHAD4TotalSignal-ratio*NZDCHAD4TotalNoise); 
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///NZDC Sum
		  NZDCTotal=NZDCHADTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=NZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(NZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("N-ZDC HAD Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==True
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////////
	///////////////////////////////////
	else { //Begin NoiseSubtract==False
	  if (ADCVeto==1)
	    {
	      int nhad1adc;
	      int nhad2adc;
	      int nhad3adc;
	      int nhad4adc;
	      bool Ndidsaturate;
		
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC_ADCVeto","N-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		    NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		    NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		    NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		    ////ADCCounters
		    NHAD1ADC= (TLeaf*)chain->GetLeaf("negHD1ADCtsz");//NHAD1
		    NHAD2ADC= (TLeaf*)chain->GetLeaf("negHD2ADCtsz");//NHAD2
		    NHAD3ADC= (TLeaf*)chain->GetLeaf("negHD3ADCtsz");//NHAD3
		    NHAD4ADC= (TLeaf*)chain->GetLeaf("negHD4ADCtsz");//NHAD4
		   		    
		    ZDCTotal=0.;
		    NZDCTotal=0.;
		    NZDCHADTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///NZDC
		    NZDCHAD1TotalSignal=0.;
		    NZDCHAD2TotalSignal=0.;
		    NZDCHAD3TotalSignal=0.;
		    NZDCHAD4TotalSignal=0.;
		    //ADCCRAP
		    nhad1adc=0;
		    nhad2adc=0;
		    nhad3adc=0;
		    nhad4adc=0;
		    Ndidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    nhad1adc=NHAD1ADC->GetValue(k);
			    nhad2adc=NHAD2ADC->GetValue(k);
			    nhad3adc=NHAD3ADC->GetValue(k);
			    nhad4adc=NHAD4ADC->GetValue(k);
			    //NZDC Signal
			    if ((nhad1adc!=127) && (nhad2adc!=127) && (nhad3adc!=127) &&  (nhad4adc!=127))
			      {
				NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
				NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
				NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
				NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			      }
			    else {
			      Ndidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    ///NZDC-HAD
		    NZDCHADTotal=(NZDCHAD1TotalSignal)+(NZDCHAD2TotalSignal)+(NZDCHAD3TotalSignal)+(NZDCHAD4TotalSignal); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///NZDC Sum
		    NZDCTotal=NZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=NZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Ndidsaturate==false)
		      {
			histogram_1->Fill(NZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("N-ZDC HAD Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    
		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("N-ZDC_1D_fC","N-ZDC_1D_fC", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  NHAD1fC= (TLeaf*)chain->GetLeaf("negHD1cFtsz");//NHAD1
		  NHAD2fC= (TLeaf*)chain->GetLeaf("negHD2cFtsz");//NHAD2
		  NHAD3fC= (TLeaf*)chain->GetLeaf("negHD3cFtsz");//NHAD3
		  NHAD4fC= (TLeaf*)chain->GetLeaf("negHD4cFtsz");//NHAD4
		 		  
		  ZDCTotal=0.;
		  NZDCTotal=0.;
		  NZDCHADTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///NZDC
		  NZDCHAD1TotalSignal=0.;
		  NZDCHAD2TotalSignal=0.;
		  NZDCHAD3TotalSignal=0.;
		  NZDCHAD4TotalSignal=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //NZDC Signal
			  NZDCHAD1TotalSignal+=NHAD1fC->GetValue(k);
			  NZDCHAD2TotalSignal+=NHAD2fC->GetValue(k);
			  NZDCHAD3TotalSignal+=NHAD3fC->GetValue(k);
			  NZDCHAD4TotalSignal+=NHAD4fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  ///NZDC-HAD
		  NZDCHADTotal=(NZDCHAD1TotalSignal)+(NZDCHAD2TotalSignal)+(NZDCHAD3TotalSignal)+(NZDCHAD4TotalSignal); 
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///NZDC Sum
		  NZDCTotal=NZDCHADTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=NZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(NZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("N-ZDC HAD Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==False
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////
	/////////////////////////////////
      }//End of HAD Only
    ////////////////////////////////////
    ///////////////////////////////////




   }//End of NZDC Only
  ////////////////////////////
  //////////////////////////
  //////////////////////////
  ///////////////////////////

else if(PZDC==1 && NZDC==0)
   {//Begin PZDC only

    if (EM==1 && HAD==1)
      {
	///PZDC
	double PZDCEM1TotalSignal;
	double PZDCEM2TotalSignal;
	double PZDCEM3TotalSignal;
	double PZDCEM4TotalSignal;
	double PZDCEM5TotalSignal;
	double PZDCHAD1TotalSignal;
	double PZDCHAD2TotalSignal;
	double PZDCHAD3TotalSignal;
	double PZDCHAD4TotalSignal;
	if (NoiseSubtract==true)
	  {
	    ///PZDC
	    double PZDCEM1TotalNoise;
	    double PZDCEM2TotalNoise;
	    double PZDCEM3TotalNoise;
	    double PZDCEM4TotalNoise;
	    double PZDCEM5TotalNoise;
	    double PZDCHAD1TotalNoise;
	    double PZDCHAD2TotalNoise;
	    double PZDCHAD3TotalNoise;
	    double PZDCHAD4TotalNoise;
	    if (ADCVeto==1)
	      {
		int pem1adc;
		int pem2adc;
		int pem3adc;
		int pem4adc;
		int pem5adc;
		int phad1adc;
		int phad2adc;
		int phad3adc;
		int phad4adc;
		bool Pdidsaturate;
		
		TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC_NS_ADCVeto","P-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		    PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		    PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		    PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		    PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		    PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		    PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		    PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		    PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		   
		    ////ADCCounters
		    PHAD1ADC= (TLeaf*)chain->GetLeaf("posHD1ADCtsz");//PHAD1
		    PHAD2ADC= (TLeaf*)chain->GetLeaf("posHD2ADCtsz");//PHAD2
		    PHAD3ADC= (TLeaf*)chain->GetLeaf("posHD3ADCtsz");//PHAD3
		    PHAD4ADC= (TLeaf*)chain->GetLeaf("posHD4ADCtsz");//PHAD4
		    PEM1ADC= (TLeaf*)chain->GetLeaf("posEM1ADCtsz");//PEM1
		    PEM2ADC= (TLeaf*)chain->GetLeaf("posEM2ADCtsz");//PEM2
		    PEM3ADC= (TLeaf*)chain->GetLeaf("posEM3ADCtsz");//PEM3
		    PEM4ADC= (TLeaf*)chain->GetLeaf("posEM4ADCtsz");//PEM4
		    PEM5ADC= (TLeaf*)chain->GetLeaf("posEM5ADCtsz");//PEM5

		    
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCEMTotal=0.;
		    PZDCHADTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    

		    ///PZDC
		    PZDCEM1TotalSignal=0.;
		    PZDCEM1TotalNoise=0.;
		    PZDCEM2TotalSignal=0.;
		    PZDCEM2TotalNoise=0.;
		    PZDCEM3TotalSignal=0.;
		    PZDCEM3TotalNoise=0.;
		    PZDCEM4TotalSignal=0.;
		    PZDCEM4TotalNoise=0.;
		    PZDCEM5TotalSignal=0.;
		    PZDCEM5TotalNoise=0.;
		    PZDCHAD1TotalSignal=0.;
		    PZDCHAD1TotalNoise=0.;
		    PZDCHAD2TotalSignal=0.;
		    PZDCHAD2TotalNoise=0.;
		    PZDCHAD3TotalSignal=0.;
		    PZDCHAD3TotalNoise=0.;
		    PZDCHAD4TotalSignal=0.;
		    PZDCHAD4TotalNoise=0.;
		    //ADCCRAP
		    pem1adc=0;
		    pem2adc=0;
		    pem3adc=0;
		    pem4adc=0;
		    pem5adc=0;
		    phad1adc=0;
		    phad2adc=0;
		    phad3adc=0;
		    phad4adc=0;
		    Pdidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			  {
			    //PZDC Noise
			    PZDCEM1TotalNoise+=PEM1fC->GetValue(k);
			    PZDCEM2TotalNoise+=PEM2fC->GetValue(k);
			    PZDCEM3TotalNoise+=PEM3fC->GetValue(k);
			    PZDCEM4TotalNoise+=PEM4fC->GetValue(k);
			    PZDCEM5TotalNoise+=PEM5fC->GetValue(k);
			    PZDCHAD1TotalNoise+=PHAD1fC->GetValue(k);
			    PZDCHAD2TotalNoise+=PHAD2fC->GetValue(k);
			    PZDCHAD3TotalNoise+=PHAD3fC->GetValue(k);
			    PZDCHAD4TotalNoise+=PHAD4fC->GetValue(k);
			  }//end of ZDC Noise statement
			else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    pem1adc=PEM1ADC->GetValue(k);
			    pem2adc=PEM2ADC->GetValue(k);
			    pem3adc=PEM3ADC->GetValue(k);
			    pem4adc=PEM4ADC->GetValue(k);
			    pem5adc=PEM5ADC->GetValue(k);
			    phad1adc=PHAD1ADC->GetValue(k);
			    phad2adc=PHAD2ADC->GetValue(k);
			    phad3adc=PHAD3ADC->GetValue(k);
			    phad4adc=PHAD4ADC->GetValue(k);
			    //PZDC Signal
			    if ((pem1adc!=127) && (pem2adc!=127) && (pem3adc!=127) && (pem4adc!=127) && (pem5adc!=127) && (phad1adc!=127) && (phad2adc!=127) && (phad3adc!=127) &&  (phad4adc!=127))
			      {
				PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
				PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
				PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
				PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
				PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
				PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
				PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
				PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
				PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			      }
			    else {
			      Pdidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //PZDC-EM
		    PZDCEMTotal=(PZDCEM1TotalSignal-ratio*PZDCEM1TotalNoise)+(PZDCEM2TotalSignal-ratio*PZDCEM2TotalNoise)+(PZDCEM3TotalSignal-ratio*PZDCEM3TotalNoise)+(PZDCEM4TotalSignal-ratio*PZDCEM4TotalNoise)+(PZDCEM5TotalSignal-ratio*PZDCEM5TotalNoise);
		    ///PZDC-HAD
		    PZDCHADTotal=(PZDCHAD1TotalSignal-ratio*PZDCHAD1TotalNoise)+(PZDCHAD2TotalSignal-ratio*PZDCHAD2TotalNoise)+(PZDCHAD3TotalSignal-ratio*PZDCHAD3TotalNoise)+(PZDCHAD4TotalSignal-ratio*PZDCHAD4TotalNoise); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCEMTotal+PZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Pdidsaturate==false)
		      {
			histogram_1->Fill(PZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("P-ZDC Total Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC_NS","P-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		  PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		  PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		  PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		  PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		  PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		  PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		  PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		  PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5

		  
		  ZDCTotal=0.;
		  PZDCTotal=0.;
		  PZDCEMTotal=0.;
		  PZDCHADTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///PZDC
		  PZDCEM1TotalSignal=0.;
		  PZDCEM1TotalNoise=0.;
		  PZDCEM2TotalSignal=0.;
		  PZDCEM2TotalNoise=0.;
		  PZDCEM3TotalSignal=0.;
		  PZDCEM3TotalNoise=0.;
		  PZDCEM4TotalSignal=0.;
		  PZDCEM4TotalNoise=0.;
		  PZDCEM5TotalSignal=0.;
		  PZDCEM5TotalNoise=0.;
		  PZDCHAD1TotalSignal=0.;
		  PZDCHAD1TotalNoise=0.;
		  PZDCHAD2TotalSignal=0.;
		  PZDCHAD2TotalNoise=0.;
		  PZDCHAD3TotalSignal=0.;
		  PZDCHAD3TotalNoise=0.;
		  PZDCHAD4TotalSignal=0.;
		  PZDCHAD4TotalNoise=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			{
			  //PZDC Noise
			  PZDCEM1TotalNoise+=PEM1fC->GetValue(k);
			  PZDCEM2TotalNoise+=PEM2fC->GetValue(k);
			  PZDCEM3TotalNoise+=PEM3fC->GetValue(k);
			  PZDCEM4TotalNoise+=PEM4fC->GetValue(k);
			  PZDCEM5TotalNoise+=PEM5fC->GetValue(k);
			  PZDCHAD1TotalNoise+=PHAD1fC->GetValue(k);
			  PZDCHAD2TotalNoise+=PHAD2fC->GetValue(k);
			  PZDCHAD3TotalNoise+=PHAD3fC->GetValue(k);
			  PZDCHAD4TotalNoise+=PHAD4fC->GetValue(k);
			}//end of ZDC Noise statement
		      else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //PZDC Signal
			  PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
			  PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
			  PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
			  PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
			  PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			  PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
			  PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
			  PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
			  PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  //PZDC-EM
		  PZDCEMTotal=(PZDCEM1TotalSignal-ratio*PZDCEM1TotalNoise)+(PZDCEM2TotalSignal-ratio*PZDCEM2TotalNoise)+(PZDCEM3TotalSignal-ratio*PZDCEM3TotalNoise)+(PZDCEM4TotalSignal-ratio*PZDCEM4TotalNoise)+(PZDCEM5TotalSignal-ratio*PZDCEM5TotalNoise);
		  ///PZDC-HAD
		  PZDCHADTotal=(PZDCHAD1TotalSignal-ratio*PZDCHAD1TotalNoise)+(PZDCHAD2TotalSignal-ratio*PZDCHAD2TotalNoise)+(PZDCHAD3TotalSignal-ratio*PZDCHAD3TotalNoise)+(PZDCHAD4TotalSignal-ratio*PZDCHAD4TotalNoise); 
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                 ///PZDC Sum
		  PZDCTotal=PZDCEMTotal+PZDCHADTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=PZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(PZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("P-ZDC Total Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==True
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////////
	///////////////////////////////////
	else { //Begin NoiseSubtract==False
	  if (ADCVeto==1)
	    {
	      int pem1adc;
	      int pem2adc;
	      int pem3adc;
	      int pem4adc;
	      int pem5adc;
	      int phad1adc;
	      int phad2adc;
	      int phad3adc;
	      int phad4adc;
	      bool Pdidsaturate;
		
	      TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC_ADCVeto","P-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		    PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		    PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		    PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		    PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		    PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		    PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		    PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		    PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		    
		    ////ADCCounters
		    PHAD1ADC= (TLeaf*)chain->GetLeaf("posHD1ADCtsz");//PHAD1
		    PHAD2ADC= (TLeaf*)chain->GetLeaf("posHD2ADCtsz");//PHAD2
		    PHAD3ADC= (TLeaf*)chain->GetLeaf("posHD3ADCtsz");//PHAD3
		    PHAD4ADC= (TLeaf*)chain->GetLeaf("posHD4ADCtsz");//PHAD4
		    PEM1ADC= (TLeaf*)chain->GetLeaf("posEM1ADCtsz");//PEM1
		    PEM2ADC= (TLeaf*)chain->GetLeaf("posEM2ADCtsz");//PEM2
		    PEM3ADC= (TLeaf*)chain->GetLeaf("posEM3ADCtsz");//PEM3
		    PEM4ADC= (TLeaf*)chain->GetLeaf("posEM4ADCtsz");//PEM4
		    PEM5ADC= (TLeaf*)chain->GetLeaf("posEM5ADCtsz");//PEM5
		    
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCEMTotal=0.;
		    PZDCHADTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///PZDC
		    PZDCEM1TotalSignal=0.;
		    PZDCEM2TotalSignal=0.;
		    PZDCEM3TotalSignal=0.;
		    PZDCEM4TotalSignal=0.;
		    PZDCEM5TotalSignal=0.;
		    PZDCHAD1TotalSignal=0.;
		    PZDCHAD2TotalSignal=0.;
		    PZDCHAD3TotalSignal=0.;
		    PZDCHAD4TotalSignal=0.;
		    //ADCCRAP

		    pem1adc=0;
		    pem2adc=0;
		    pem3adc=0;
		    pem4adc=0;
		    pem5adc=0;
		    phad1adc=0;
		    phad2adc=0;
		    phad3adc=0;
		    phad4adc=0;
		    Pdidsaturate=false;
		    Pdidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    pem1adc=PEM1ADC->GetValue(k);
			    pem2adc=PEM2ADC->GetValue(k);
			    pem3adc=PEM3ADC->GetValue(k);
			    pem4adc=PEM4ADC->GetValue(k);
			    pem5adc=PEM5ADC->GetValue(k);
			    phad1adc=PHAD1ADC->GetValue(k);
			    phad2adc=PHAD2ADC->GetValue(k);
			    phad3adc=PHAD3ADC->GetValue(k);
			    phad4adc=PHAD4ADC->GetValue(k);
                           //PZDC Signal
			    if ((pem1adc!=127) && (pem2adc!=127) && (pem3adc!=127) && (pem4adc!=127) && (pem5adc!=127) && (phad1adc!=127) && (phad2adc!=127) && (phad3adc!=127) &&  (phad4adc!=127))
			      {
				PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
				PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
				PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
				PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
				PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
				PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
				PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
				PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
				PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			      }
			    else {
			      Pdidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //PZDC-EM
		    PZDCEMTotal=(PZDCEM1TotalSignal)+(PZDCEM2TotalSignal)+(PZDCEM3TotalSignal)+(PZDCEM4TotalSignal)+(PZDCEM5TotalSignal);
		    ///PZDC-HAD
		    PZDCHADTotal=(PZDCHAD1TotalSignal)+(PZDCHAD2TotalSignal)+(PZDCHAD3TotalSignal)+(PZDCHAD4TotalSignal); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCEMTotal+PZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Pdidsaturate==false)
		      {
			histogram_1->Fill(PZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("P-ZDC Total Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    
		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC","P-ZDC_1D_fC", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		  PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		  PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		  PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		  PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		  PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		  PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		  PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		  PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		  
		  ZDCTotal=0.;
		  PZDCTotal=0.;
		  PZDCEMTotal=0.;
		  PZDCHADTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///PZDC
		  PZDCEM1TotalSignal=0.;
		  PZDCEM2TotalSignal=0.;
		  PZDCEM3TotalSignal=0.;
		  PZDCEM4TotalSignal=0.;
		  PZDCEM5TotalSignal=0.;
		  PZDCHAD1TotalSignal=0.;
		  PZDCHAD2TotalSignal=0.;
		  PZDCHAD3TotalSignal=0.;
		  PZDCHAD4TotalSignal=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //PZDC Signal
			  PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
			  PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
			  PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
			  PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
			  PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			  PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
			  PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
			  PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
			  PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  //PZDC-EM
		  PZDCEMTotal=(PZDCEM1TotalSignal)+(PZDCEM2TotalSignal)+(PZDCEM3TotalSignal)+(PZDCEM4TotalSignal)+(PZDCEM5TotalSignal);
		  ///PZDC-HAD
		  PZDCHADTotal=(PZDCHAD1TotalSignal)+(PZDCHAD2TotalSignal)+(PZDCHAD3TotalSignal)+(PZDCHAD4TotalSignal); 
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///PZDC Sum
		  PZDCTotal=PZDCEMTotal+PZDCHADTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=PZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(PZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("P-ZDC Total Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==False
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////
	/////////////////////////////////
      }//End of EM&HAD==True
    

    ////////////////////////////////
    //////////////////////////////
    else if (EM==1 && HAD==0)
      {////Begin EM ONLY
	///PZDC
	double PZDCEM1TotalSignal;
	double PZDCEM2TotalSignal;
	double PZDCEM3TotalSignal;
	double PZDCEM4TotalSignal;
	double PZDCEM5TotalSignal;
	if (NoiseSubtract==true)
	  {
	    ///PZDC
	    double PZDCEM1TotalNoise;
	    double PZDCEM2TotalNoise;
	    double PZDCEM3TotalNoise;
	    double PZDCEM4TotalNoise;
	    double PZDCEM5TotalNoise;
	    if (ADCVeto==1)
	      {
		int pem1adc;
		int pem2adc;
		int pem3adc;
		int pem4adc;
		int pem5adc;
		bool Pdidsaturate;
		
		TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC_NS_ADCVeto","P-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		    PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		    PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		    PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		    PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		    
		    ////ADCCounters
		    PEM1ADC= (TLeaf*)chain->GetLeaf("posEM1ADCtsz");//PEM1
		    PEM2ADC= (TLeaf*)chain->GetLeaf("posEM2ADCtsz");//PEM2
		    PEM3ADC= (TLeaf*)chain->GetLeaf("posEM3ADCtsz");//PEM3
		    PEM4ADC= (TLeaf*)chain->GetLeaf("posEM4ADCtsz");//PEM4
		    PEM5ADC= (TLeaf*)chain->GetLeaf("posEM5ADCtsz");//PEM5
		    
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCEMTotal=0.;
		    		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///PZDC
		    PZDCEM1TotalSignal=0.;
		    PZDCEM1TotalNoise=0.;
		    PZDCEM2TotalSignal=0.;
		    PZDCEM2TotalNoise=0.;
		    PZDCEM3TotalSignal=0.;
		    PZDCEM3TotalNoise=0.;
		    PZDCEM4TotalSignal=0.;
		    PZDCEM4TotalNoise=0.;
		    PZDCEM5TotalSignal=0.;
		    PZDCEM5TotalNoise=0.;
		    //ADCCRAP
		    pem1adc=0;
		    pem2adc=0;
		    pem3adc=0;
		    pem4adc=0;
		    pem5adc=0;
		    Pdidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			  {
			    //PZDC Noise
			    PZDCEM1TotalNoise+=PEM1fC->GetValue(k);
			    PZDCEM2TotalNoise+=PEM2fC->GetValue(k);
			    PZDCEM3TotalNoise+=PEM3fC->GetValue(k);
			    PZDCEM4TotalNoise+=PEM4fC->GetValue(k);
			    PZDCEM5TotalNoise+=PEM5fC->GetValue(k);
			  }//end of ZDC Noise statement
			else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    pem1adc=PEM1ADC->GetValue(k);
			    pem2adc=PEM2ADC->GetValue(k);
			    pem3adc=PEM3ADC->GetValue(k);
			    pem4adc=PEM4ADC->GetValue(k);
			    pem5adc=PEM5ADC->GetValue(k);
			    //PZDC Signal
			    if ((pem1adc!=127) && (pem2adc!=127) && (pem3adc!=127) && (pem4adc!=127) && (pem5adc!=127))
			      {
				PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
				PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
				PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
				PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
				PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			      }
			    else {
			      Pdidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //PZDC-EM
		    PZDCEMTotal=(PZDCEM1TotalSignal-ratio*PZDCEM1TotalNoise)+(PZDCEM2TotalSignal-ratio*PZDCEM2TotalNoise)+(PZDCEM3TotalSignal-ratio*PZDCEM3TotalNoise)+(PZDCEM4TotalSignal-ratio*PZDCEM4TotalNoise)+(PZDCEM5TotalSignal-ratio*PZDCEM5TotalNoise);
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCEMTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Pdidsaturate==false)
		      {
			histogram_1->Fill(PZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("P-ZDC EM Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC_NS","P-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		  PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		  PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		  PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		  PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		  
		  ZDCTotal=0.;
		  PZDCTotal=0.;
		  PZDCEMTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  ///PZDC
		  PZDCEM1TotalSignal=0.;
		  PZDCEM1TotalNoise=0.;
		  PZDCEM2TotalSignal=0.;
		  PZDCEM2TotalNoise=0.;
		  PZDCEM3TotalSignal=0.;
		  PZDCEM3TotalNoise=0.;
		  PZDCEM4TotalSignal=0.;
		  PZDCEM4TotalNoise=0.;
		  PZDCEM5TotalSignal=0.;
		  PZDCEM5TotalNoise=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			{
			  //PZDC Noise
			  PZDCEM1TotalNoise+=PEM1fC->GetValue(k);
			  PZDCEM2TotalNoise+=PEM2fC->GetValue(k);
			  PZDCEM3TotalNoise+=PEM3fC->GetValue(k);
			  PZDCEM4TotalNoise+=PEM4fC->GetValue(k);
			  PZDCEM5TotalNoise+=PEM5fC->GetValue(k);
			}//end of ZDC Noise statement
		      else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //PZDC Signal
			  PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
			  PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
			  PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
			  PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
			  PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  //PZDC-EM
		  PZDCEMTotal=(PZDCEM1TotalSignal-ratio*PZDCEM1TotalNoise)+(PZDCEM2TotalSignal-ratio*PZDCEM2TotalNoise)+(PZDCEM3TotalSignal-ratio*PZDCEM3TotalNoise)+(PZDCEM4TotalSignal-ratio*PZDCEM4TotalNoise)+(PZDCEM5TotalSignal-ratio*PZDCEM5TotalNoise);
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///PZDC Sum
		  PZDCTotal=PZDCEMTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=PZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(PZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("P-ZDC EM Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==True
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////////
	///////////////////////////////////
	else { //Begin NoiseSubtract==False
	  if (ADCVeto==1)
	    {
	      int pem1adc;
	      int pem2adc;
	      int pem3adc;
	      int pem4adc;
	      int pem5adc;
	      bool Pdidsaturate;
		
	      TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC_ADCVeto","P-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		    PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		    PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		    PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		    PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5
		    
		    ////ADCCounters
		    PEM1ADC= (TLeaf*)chain->GetLeaf("posEM1ADCtsz");//PEM1
		    PEM2ADC= (TLeaf*)chain->GetLeaf("posEM2ADCtsz");//PEM2
		    PEM3ADC= (TLeaf*)chain->GetLeaf("posEM3ADCtsz");//PEM3
		    PEM4ADC= (TLeaf*)chain->GetLeaf("posEM4ADCtsz");//PEM4
		    PEM5ADC= (TLeaf*)chain->GetLeaf("posEM5ADCtsz");//PEM5
		    
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCEMTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///PZDC
		    PZDCEM1TotalSignal=0.;
		    PZDCEM2TotalSignal=0.;
		    PZDCEM3TotalSignal=0.;
		    PZDCEM4TotalSignal=0.;
		    PZDCEM5TotalSignal=0.;
		    //ADCCRAP
		    pem1adc=0;
		    pem2adc=0;
		    pem3adc=0;
		    pem4adc=0;
		    pem5adc=0;
		    Pdidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    pem1adc=PEM1ADC->GetValue(k);
			    pem2adc=PEM2ADC->GetValue(k);
			    pem3adc=PEM3ADC->GetValue(k);
			    pem4adc=PEM4ADC->GetValue(k);
			    pem5adc=PEM5ADC->GetValue(k);
			    //PZDC Signal
			    if ((pem1adc!=127) && (pem2adc!=127) && (pem3adc!=127) && (pem4adc!=127) && (pem5adc!=127))
			      {
				PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
				PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
				PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
				PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
				PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			      }
			    else {
			      Pdidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    //PZDC-EM
		    PZDCEMTotal=(PZDCEM1TotalSignal)+(PZDCEM2TotalSignal)+(PZDCEM3TotalSignal)+(PZDCEM4TotalSignal)+(PZDCEM5TotalSignal);
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCEMTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Pdidsaturate==false)
		      {
			histogram_1->Fill(PZDCTotal);
		      }
			////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("P-ZDC EM Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    

		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC","P-ZDC_1D_fC", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  PEM1fC= (TLeaf*)chain->GetLeaf("posEM1cFtsz");//PEM1
		  PEM2fC= (TLeaf*)chain->GetLeaf("posEM2cFtsz");//PEM2
		  PEM3fC= (TLeaf*)chain->GetLeaf("posEM3cFtsz");//PEM3
		  PEM4fC= (TLeaf*)chain->GetLeaf("posEM4cFtsz");//PEM4
		  PEM5fC= (TLeaf*)chain->GetLeaf("posEM5cFtsz");//PEM5

		  
		  ZDCTotal=0.;
		  PZDCTotal=0.;
		  PZDCEMTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///PZDC
		  PZDCEM1TotalSignal=0.;
		  PZDCEM2TotalSignal=0.;
		  PZDCEM3TotalSignal=0.;
		  PZDCEM4TotalSignal=0.;
		  PZDCEM5TotalSignal=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //PZDC Signal
			  PZDCEM1TotalSignal+=PEM1fC->GetValue(k);
			  PZDCEM2TotalSignal+=PEM2fC->GetValue(k);
			  PZDCEM3TotalSignal+=PEM3fC->GetValue(k);
			  PZDCEM4TotalSignal+=PEM4fC->GetValue(k);
			  PZDCEM5TotalSignal+=PEM5fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  //PZDC-EM
		  PZDCEMTotal=(PZDCEM1TotalSignal)+(PZDCEM2TotalSignal)+(PZDCEM3TotalSignal)+(PZDCEM4TotalSignal)+(PZDCEM5TotalSignal);
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///PZDC Sum
		  PZDCTotal=PZDCEMTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=PZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(PZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("P-ZDC EM Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==False
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////
	/////////////////////////////////
      }//End of EM ONLY
    //////////////////////////////////////
    /////////////////////////////////////

    ////////////////////////////
    /////////////////////////////
    else if(EM==0 && HAD==1)
      {//Begin HAD Only
	///PZDC
	double PZDCHAD1TotalSignal;
	double PZDCHAD2TotalSignal;
	double PZDCHAD3TotalSignal;
	double PZDCHAD4TotalSignal;
	if (NoiseSubtract==true)
	  {
	    ///PZDC
	    double PZDCHAD1TotalNoise;
	    double PZDCHAD2TotalNoise;
	    double PZDCHAD3TotalNoise;
	    double PZDCHAD4TotalNoise;
	    if (ADCVeto==1)
	      {
		int phad1adc;
		int phad2adc;
		int phad3adc;
		int phad4adc;
		bool Pdidsaturate;
		
		TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC_NS_ADCVeto","P-ZDC_1D_fC_NS_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		    PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		    PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		    PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		    		    
		    ////ADCCounters
		    PHAD1ADC= (TLeaf*)chain->GetLeaf("posHD1ADCtsz");//PHAD1
		    PHAD2ADC= (TLeaf*)chain->GetLeaf("posHD2ADCtsz");//PHAD2
		    PHAD3ADC= (TLeaf*)chain->GetLeaf("posHD3ADCtsz");//PHAD3
		    PHAD4ADC= (TLeaf*)chain->GetLeaf("posHD4ADCtsz");//PHAD4
		    
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCHADTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///PZDC
		    PZDCHAD1TotalSignal=0.;
		    PZDCHAD1TotalNoise=0.;
		    PZDCHAD2TotalSignal=0.;
		    PZDCHAD2TotalNoise=0.;
		    PZDCHAD3TotalSignal=0.;
		    PZDCHAD3TotalNoise=0.;
		    PZDCHAD4TotalSignal=0.;
		    PZDCHAD4TotalNoise=0.;
		    //ADCCRAP
		    phad1adc=0;
		    phad2adc=0;
		    phad3adc=0;
		    phad4adc=0;
		    Pdidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			  {
			    //PZDC Noise
			    PZDCHAD1TotalNoise+=PHAD1fC->GetValue(k);
			    PZDCHAD2TotalNoise+=PHAD2fC->GetValue(k);
			    PZDCHAD3TotalNoise+=PHAD3fC->GetValue(k);
			    PZDCHAD4TotalNoise+=PHAD4fC->GetValue(k);
			  }//end of ZDC Noise statement
			else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    phad1adc=PHAD1ADC->GetValue(k);
			    phad2adc=PHAD2ADC->GetValue(k);
			    phad3adc=PHAD3ADC->GetValue(k);
			    phad4adc=PHAD4ADC->GetValue(k);
			    //PZDC Signal
			    if ((phad1adc!=127) && (phad2adc!=127) && (phad3adc!=127) &&  (phad4adc!=127))
			      {
				PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
				PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
				PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
				PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			      }
			    else {
			      Pdidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    ///PZDC-HAD
		    PZDCHADTotal=(PZDCHAD1TotalSignal-ratio*PZDCHAD1TotalNoise)+(PZDCHAD2TotalSignal-ratio*PZDCHAD2TotalNoise)+(PZDCHAD3TotalSignal-ratio*PZDCHAD3TotalNoise)+(PZDCHAD4TotalSignal-ratio*PZDCHAD4TotalNoise); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///PZDC Sum
		    PZDCTotal=PZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Pdidsaturate==false)
		      {
			histogram_1->Fill(PZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("P-ZDC HAD Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC_NS","P-ZDC_1D_fC_NS", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		  PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		  PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		  PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		 		  
		  ZDCTotal=0.;
		  PZDCTotal=0.;
		  PZDCHADTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///PZDC
		  PZDCHAD1TotalSignal=0.;
		  PZDCHAD1TotalNoise=0.;
		  PZDCHAD2TotalSignal=0.;
		  PZDCHAD2TotalNoise=0.;
		  PZDCHAD3TotalSignal=0.;
		  PZDCHAD3TotalNoise=0.;
		  PZDCHAD4TotalSignal=0.;
		  PZDCHAD4TotalNoise=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if ((k==NoiseTS1) || (k==NoiseTS2) || (k==NoiseTS3) ) //define ZDC noise TS's
			{
			  //PZDC Noise
			  PZDCHAD1TotalNoise+=PHAD1fC->GetValue(k);
			  PZDCHAD2TotalNoise+=PHAD2fC->GetValue(k);
			  PZDCHAD3TotalNoise+=PHAD3fC->GetValue(k);
			  PZDCHAD4TotalNoise+=PHAD4fC->GetValue(k);
			}//end of ZDC Noise statement
		      else if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //PZDC Signal
			  PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
			  PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
			  PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
			  PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  ///PZDC-HAD
		  PZDCHADTotal=(PZDCHAD1TotalSignal-ratio*PZDCHAD1TotalNoise)+(PZDCHAD2TotalSignal-ratio*PZDCHAD2TotalNoise)+(PZDCHAD3TotalSignal-ratio*PZDCHAD3TotalNoise)+(PZDCHAD4TotalSignal-ratio*PZDCHAD4TotalNoise); 
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///PZDC Sum
		  PZDCTotal=PZDCHADTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=PZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(PZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("P-ZDC HAD Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==True
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////////
	///////////////////////////////////
	else { //Begin NoiseSubtract==False
	  if (ADCVeto==1)
	    {
	      int phad1adc;
	      int phad2adc;
	      int phad3adc;
	      int phad4adc;
	      bool Pdidsaturate;
		
	      TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC_ADCVeto","P-ZDC_1D_fC_ADCVeto", 200, 0.0, 10000.0);
		std::cout<<"Starting the analysis now"<<std::endl;
		for (int i=0;i<EventsToAnalyze;i++)
		  {
		    chain->GetEntry(i);
		    //ZDC Leaves
		    PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		    PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		    PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		    PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		    ////ADCCounters
		    PHAD1ADC= (TLeaf*)chain->GetLeaf("posHD1ADCtsz");//PHAD1
		    PHAD2ADC= (TLeaf*)chain->GetLeaf("posHD2ADCtsz");//PHAD2
		    PHAD3ADC= (TLeaf*)chain->GetLeaf("posHD3ADCtsz");//PHAD3
		    PHAD4ADC= (TLeaf*)chain->GetLeaf("posHD4ADCtsz");//PHAD4
		   		    
		    ZDCTotal=0.;
		    PZDCTotal=0.;
		    PZDCHADTotal=0.;
		    
		    ///Set All of the Signal/Noise Counters to 0 every event
		    
		    ///PZDC
		    PZDCHAD1TotalSignal=0.;
		    PZDCHAD2TotalSignal=0.;
		    PZDCHAD3TotalSignal=0.;
		    PZDCHAD4TotalSignal=0.;
		    //ADCCRAP
		    phad1adc=0;
		    phad2adc=0;
		    phad3adc=0;
		    phad4adc=0;
		    Pdidsaturate=false;
		    for (int k=0;k<10;k++)//adding up the values for ZDC signal
		      {
			if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			  {
			    phad1adc=PHAD1ADC->GetValue(k);
			    phad2adc=PHAD2ADC->GetValue(k);
			    phad3adc=PHAD3ADC->GetValue(k);
			    phad4adc=PHAD4ADC->GetValue(k);
			    //PZDC Signal
			    if ((phad1adc!=127) && (phad2adc!=127) && (phad3adc!=127) &&  (phad4adc!=127))
			      {
				PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
				PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
				PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
				PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			      }
			    else {
			      Pdidsaturate=true;
			    }
			  }//End of ZDC Signal TS's
		      }//end of ZDC TS loop
		    

		    ///////////////////////////////////////////////////////
		    //////////////MAKING SUMS/////////////////////////////
		    /////////////////////////////////////////////////////
		    ///PZDC-HAD
		    PZDCHADTotal=(PZDCHAD1TotalSignal)+(PZDCHAD2TotalSignal)+(PZDCHAD3TotalSignal)+(PZDCHAD4TotalSignal); 
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///PZDC Sum
		    PZDCTotal=PZDCHADTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ZDCTotal=PZDCTotal;
		    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		    ///////////////////////////////////////////
		    ///////////Fill Histograms////////////////
		    /////////////////////////////////////////
		    if (Pdidsaturate==false)
		      {
			histogram_1->Fill(PZDCTotal);
		      }
		    /////////////////////////////////
		    //////////End Fill Histos///////
		    ///////////////////////////////
		  }//End of Event Loop
		//////////////////////////////////
		//////////Draw Histos//////////
		//////////////////////////////
		    TCanvas c1;
		    histogram_1->SetXTitle("P-ZDC HAD Charge (fC)");
		    histogram_1->SetYTitle("Counts");
		    histogram_1->GetXaxis()->CenterTitle(1);
		    histogram_1->GetYaxis()->CenterTitle(1);
		    histogram_1->SetLineColor(2);
		    histogram_1->SetTitleOffset(1.13,"Y");
		    gStyle->SetPalette(1);
		    c1->SetLogy(1);
		    gStyle->SetOptStat("ne");
		    histogram_1->Draw();
		    
		    ///////////////////////////////
		    /////////End of Draw Histos////
		    //////////////////////////////

	      }//End of ADCVeto==True
	    /////////////////////////////////
	    ////////////////////////////////////
	    else { //Begin ADCVeto==False
	      TH1F* histogram_1 = new TH1F("P-ZDC_1D_fC","P-ZDC_1D_fC", 200, 0.0, 10000.0);
	      std::cout<<"Starting the analysis now"<<std::endl;
	      for (int i=0;i<EventsToAnalyze;i++)
		{
		  chain->GetEntry(i);
		  //ZDC Leaves
		  PHAD1fC= (TLeaf*)chain->GetLeaf("posHD1cFtsz");//PHAD1
		  PHAD2fC= (TLeaf*)chain->GetLeaf("posHD2cFtsz");//PHAD2
		  PHAD3fC= (TLeaf*)chain->GetLeaf("posHD3cFtsz");//PHAD3
		  PHAD4fC= (TLeaf*)chain->GetLeaf("posHD4cFtsz");//PHAD4
		 		  
		  ZDCTotal=0.;
		  PZDCTotal=0.;
		  PZDCHADTotal=0.;
		  
		  ///Set All of the Signal/Noise Counters to 0 every event
		  
		  ///PZDC
		  PZDCHAD1TotalSignal=0.;
		  PZDCHAD2TotalSignal=0.;
		  PZDCHAD3TotalSignal=0.;
		  PZDCHAD4TotalSignal=0.;
		  for (int k=0;k<10;k++)//adding up the values for ZDC signal
		    {
		      if((k==SignalTS1) || (k==SignalTS2) || (k==SignalTS3)) //define ZDC signal TS's
			{
			  //PZDC Signal
			  PZDCHAD1TotalSignal+=PHAD1fC->GetValue(k);
			  PZDCHAD2TotalSignal+=PHAD2fC->GetValue(k);
			  PZDCHAD3TotalSignal+=PHAD3fC->GetValue(k);
			  PZDCHAD4TotalSignal+=PHAD4fC->GetValue(k);
			}//End of ZDC Signal TS's
		    }//end of ZDC TS loop
		  
		  
		  ///////////////////////////////////////////////////////
		  //////////////MAKING SUMS/////////////////////////////
		  /////////////////////////////////////////////////////
		  ///PZDC-HAD
		  PZDCHADTotal=(PZDCHAD1TotalSignal)+(PZDCHAD2TotalSignal)+(PZDCHAD3TotalSignal)+(PZDCHAD4TotalSignal); 
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///PZDC Sum
		  PZDCTotal=PZDCHADTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ZDCTotal=PZDCTotal;
		  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  ///////////END OF SUM MAKING/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		  
		  ///////////////////////////////////////////
		  ///////////Fill Histograms////////////////
		  /////////////////////////////////////////
		  histogram_1->Fill(PZDCTotal);
		  /////////////////////////////////
		  //////////End Fill Histos///////
		  ///////////////////////////////
		}//End of Event Loop
	      //////////////////////////////////
	      //////////Draw Histos//////////
	      //////////////////////////////
	      TCanvas c1;
	      histogram_1->SetXTitle("P-ZDC HAD Charge (fC)");
	      histogram_1->SetYTitle("Counts");
	      histogram_1->GetXaxis()->CenterTitle(1);
	      histogram_1->GetYaxis()->CenterTitle(1);
	      histogram_1->SetLineColor(2);
	      histogram_1->SetTitleOffset(1.13,"Y");
	      gStyle->SetPalette(1);
	      c1->SetLogy(1);
	      gStyle->SetOptStat("ne");
	      histogram_1->Draw();
	      ///////////////////////////////
	      /////////End of Draw Histos////
	      //////////////////////////////
	      
	    }//End of ADCVeto==False
	    /////////////////////////////////
	    ////////////////////////////////////

	  }//End of NoiseSubtract==False
	////////////////////////////////
	///////////////////////////////

	////////////////////////////////
	/////////////////////////////////
      }//End of HAD Only
    ////////////////////////////////////
    ///////////////////////////////////




   }//End of PZDC Only

}//End of whole macro
